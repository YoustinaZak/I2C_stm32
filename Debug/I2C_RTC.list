
I2C_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003240  08003240  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003240  08003240  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003240  08003240  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000078  080032c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080032c0  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009aa5  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018fc  00000000  00000000  00029b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0002b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072f  00000000  00000000  0002bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167d2  00000000  00000000  0002c4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c236  00000000  00000000  00042cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000829a9  00000000  00000000  0004eef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a78  00000000  00000000  000d18a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000d4318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800314c 	.word	0x0800314c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800314c 	.word	0x0800314c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <I2c_read>:
			return (ok == HAL_OK) ? 1 : 0;
			//return __HAL_I2C_GET_FLAG(clock->i2c_bus, HAL_I2C_ERROR_AF) ? 0 : 1;

		}

uint8_t I2c_read(uint8_t dev_SLA, uint8_t *Data, uint8_t Len) { //address removed
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	6039      	str	r1, [r7, #0]
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	4613      	mov	r3, r2
 800016a:	71bb      	strb	r3, [r7, #6]

			HAL_StatusTypeDef ok = HAL_I2C_Master_Receive(&hi2c1, dev_SLA << 1,
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	b29b      	uxth	r3, r3
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	b299      	uxth	r1, r3
 8000174:	79bb      	ldrb	r3, [r7, #6]
 8000176:	b29b      	uxth	r3, r3
 8000178:	2264      	movs	r2, #100	; 0x64
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <I2c_read+0x40>)
 8000180:	f001 f8a0 	bl	80012c4 <HAL_I2C_Master_Receive>
 8000184:	4603      	mov	r3, r0
 8000186:	73fb      	strb	r3, [r7, #15]
					Data, Len, 100);
			return (ok == HAL_OK) ? 1 : 0;
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf0c      	ite	eq
 800018e:	2301      	moveq	r3, #1
 8000190:	2300      	movne	r3, #0
 8000192:	b2db      	uxtb	r3, r3
			//return __HAL_I2C_GET_FLAG(clock->i2c_bus, HAL_I2C_ERROR_AF) ? 0 : 1; // if ack fail it = true = return 0

}
 8000194:	4618      	mov	r0, r3
 8000196:	3710      	adds	r7, #16
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	20000094 	.word	0x20000094

080001a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001a2:	b091      	sub	sp, #68	; 0x44
 80001a4:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001a6:	f000 fc5b 	bl	8000a60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001aa:	f000 f895 	bl	80002d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001ae:	f000 f931 	bl	8000414 <MX_GPIO_Init>
	MX_I2C1_Init();
 80001b2:	f000 f8d7 	bl	8000364 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80001b6:	f000 f903 	bl	80003c0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart1,"in \n",strlen("in \n\r"),100);
 80001ba:	2364      	movs	r3, #100	; 0x64
 80001bc:	2205      	movs	r2, #5
 80001be:	493d      	ldr	r1, [pc, #244]	; (80002b4 <main+0x114>)
 80001c0:	483d      	ldr	r0, [pc, #244]	; (80002b8 <main+0x118>)
 80001c2:	f002 f991 	bl	80024e8 <HAL_UART_Transmit>
		if(DS1307_INIT(&RTC1)== DS1307_OK) {
 80001c6:	483d      	ldr	r0, [pc, #244]	; (80002bc <main+0x11c>)
 80001c8:	f000 fadc 	bl	8000784 <DS1307_INIT>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d109      	bne.n	80001e6 <main+0x46>
			HAL_UART_Transmit(&huart1,"ok its done \n\r",strlen("ok its done\n"),100);
 80001d2:	2364      	movs	r3, #100	; 0x64
 80001d4:	220c      	movs	r2, #12
 80001d6:	493a      	ldr	r1, [pc, #232]	; (80002c0 <main+0x120>)
 80001d8:	4837      	ldr	r0, [pc, #220]	; (80002b8 <main+0x118>)
 80001da:	f002 f985 	bl	80024e8 <HAL_UART_Transmit>
			DS1307_Set(&RTC1);
 80001de:	4837      	ldr	r0, [pc, #220]	; (80002bc <main+0x11c>)
 80001e0:	f000 fb01 	bl	80007e6 <DS1307_Set>
 80001e4:	e005      	b.n	80001f2 <main+0x52>
		} else{
			HAL_UART_Transmit(&huart1,"ok its not done \n\r",strlen("ok its not done\n"),100);
 80001e6:	2364      	movs	r3, #100	; 0x64
 80001e8:	2210      	movs	r2, #16
 80001ea:	4936      	ldr	r1, [pc, #216]	; (80002c4 <main+0x124>)
 80001ec:	4832      	ldr	r0, [pc, #200]	; (80002b8 <main+0x118>)
 80001ee:	f002 f97b 	bl	80024e8 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(DS1307_Read(&RTC1)== DS1307_OK ){
 80001f2:	4832      	ldr	r0, [pc, #200]	; (80002bc <main+0x11c>)
 80001f4:	f000 fb84 	bl	8000900 <DS1307_Read>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d147      	bne.n	800028e <main+0xee>
			uint8_t stat[15]="Clock: OK  ";
 80001fe:	4a32      	ldr	r2, [pc, #200]	; (80002c8 <main+0x128>)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	ca07      	ldmia	r2, {r0, r1, r2}
 8000206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800020a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800020e:	2100      	movs	r1, #0
 8000210:	460a      	mov	r2, r1
 8000212:	801a      	strh	r2, [r3, #0]
 8000214:	460a      	mov	r2, r1
 8000216:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart1, stat, strlen(stat), 100);
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f7ff ff95 	bl	800014c <strlen>
 8000222:	4603      	mov	r3, r0
 8000224:	b29a      	uxth	r2, r3
 8000226:	f107 0118 	add.w	r1, r7, #24
 800022a:	2364      	movs	r3, #100	; 0x64
 800022c:	4822      	ldr	r0, [pc, #136]	; (80002b8 <main+0x118>)
 800022e:	f002 f95b 	bl	80024e8 <HAL_UART_Transmit>
			sprintf(info, "%02d:%02d:%02d Day %02d %02d/%02d/%02d \n\r", RTC1.hour, RTC1.min, RTC1.sec, RTC1.day, RTC1.date, RTC1.month, RTC1.year);
 8000232:	4b22      	ldr	r3, [pc, #136]	; (80002bc <main+0x11c>)
 8000234:	7a9b      	ldrb	r3, [r3, #10]
 8000236:	461d      	mov	r5, r3
 8000238:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0x11c>)
 800023a:	7a5b      	ldrb	r3, [r3, #9]
 800023c:	461e      	mov	r6, r3
 800023e:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <main+0x11c>)
 8000240:	7a1b      	ldrb	r3, [r3, #8]
 8000242:	461a      	mov	r2, r3
 8000244:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <main+0x11c>)
 8000246:	7adb      	ldrb	r3, [r3, #11]
 8000248:	4619      	mov	r1, r3
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <main+0x11c>)
 800024c:	7b1b      	ldrb	r3, [r3, #12]
 800024e:	4618      	mov	r0, r3
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <main+0x11c>)
 8000252:	7b5b      	ldrb	r3, [r3, #13]
 8000254:	461c      	mov	r4, r3
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x11c>)
 8000258:	89db      	ldrh	r3, [r3, #14]
 800025a:	9304      	str	r3, [sp, #16]
 800025c:	9403      	str	r4, [sp, #12]
 800025e:	9002      	str	r0, [sp, #8]
 8000260:	9101      	str	r1, [sp, #4]
 8000262:	9200      	str	r2, [sp, #0]
 8000264:	4633      	mov	r3, r6
 8000266:	462a      	mov	r2, r5
 8000268:	4918      	ldr	r1, [pc, #96]	; (80002cc <main+0x12c>)
 800026a:	4819      	ldr	r0, [pc, #100]	; (80002d0 <main+0x130>)
 800026c:	f002 fabc 	bl	80027e8 <siprintf>
			HAL_UART_Transmit(&huart1, info, strlen(info), 100);
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <main+0x130>)
 8000272:	f7ff ff6b 	bl	800014c <strlen>
 8000276:	4603      	mov	r3, r0
 8000278:	b29a      	uxth	r2, r3
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	4914      	ldr	r1, [pc, #80]	; (80002d0 <main+0x130>)
 800027e:	480e      	ldr	r0, [pc, #56]	; (80002b8 <main+0x118>)
 8000280:	f002 f932 	bl	80024e8 <HAL_UART_Transmit>
			HAL_Delay(1000);
 8000284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000288:	f000 fc4c 	bl	8000b24 <HAL_Delay>
 800028c:	e7b1      	b.n	80001f2 <main+0x52>
		} else{
			uint8_t error[] = "Clock: Error  \n\r";
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <main+0x134>)
 8000290:	1d3c      	adds	r4, r7, #4
 8000292:	461d      	mov	r5, r3
 8000294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000298:	682b      	ldr	r3, [r5, #0]
 800029a:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, error, strlen(error), 100);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff54 	bl	800014c <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	1d39      	adds	r1, r7, #4
 80002aa:	2364      	movs	r3, #100	; 0x64
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <main+0x118>)
 80002ae:	f002 f91b 	bl	80024e8 <HAL_UART_Transmit>
		if(DS1307_Read(&RTC1)== DS1307_OK ){
 80002b2:	e79e      	b.n	80001f2 <main+0x52>
 80002b4:	08003164 	.word	0x08003164
 80002b8:	200000e8 	.word	0x200000e8
 80002bc:	20000000 	.word	0x20000000
 80002c0:	0800316c 	.word	0x0800316c
 80002c4:	0800317c 	.word	0x0800317c
 80002c8:	080031bc 	.word	0x080031bc
 80002cc:	08003190 	.word	0x08003190
 80002d0:	20000130 	.word	0x20000130
 80002d4:	080031cc 	.word	0x080031cc

080002d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	; 0x40
 80002dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	; 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fa9e 	bl	8002828 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fa:	2301      	movs	r3, #1
 80002fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	2302      	movs	r3, #2
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000314:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000316:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f001 fc81 	bl	8001c28 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x58>
		Error_Handler();
 800032c:	f000 f8a0 	bl	8000470 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2302      	movs	r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000340:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f001 feee 	bl	800212c <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x82>
		Error_Handler();
 8000356:	f000 f88b 	bl	8000470 <Error_Handler>
	}
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	; 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_I2C1_Init+0x50>)
 800036a:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <MX_I2C1_Init+0x54>)
 800036c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_I2C1_Init+0x50>)
 8000370:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_I2C1_Init+0x58>)
 8000372:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_I2C1_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_I2C1_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_I2C1_Init+0x50>)
 8000382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000386:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <MX_I2C1_Init+0x50>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_I2C1_Init+0x50>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <MX_I2C1_Init+0x50>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_I2C1_Init+0x50>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_I2C1_Init+0x50>)
 80003a2:	f000 fe4b 	bl	800103c <HAL_I2C_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80003ac:	f000 f860 	bl	8000470 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000094 	.word	0x20000094
 80003b8:	40005400 	.word	0x40005400
 80003bc:	000186a0 	.word	0x000186a0

080003c0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_USART1_UART_Init+0x50>)
 80003c8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f8:	f002 f826 	bl	8002448 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000402:	f000 f835 	bl	8000470 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200000e8 	.word	0x200000e8
 8000410:	40013800 	.word	0x40013800

08000414 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_GPIO_Init+0x58>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <MX_GPIO_Init+0x58>)
 8000420:	f043 0320 	orr.w	r3, r3, #32
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_GPIO_Init+0x58>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0320 	and.w	r3, r3, #32
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_GPIO_Init+0x58>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a0d      	ldr	r2, [pc, #52]	; (800046c <MX_GPIO_Init+0x58>)
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_GPIO_Init+0x58>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_GPIO_Init+0x58>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a07      	ldr	r2, [pc, #28]	; (800046c <MX_GPIO_Init+0x58>)
 8000450:	f043 0308 	orr.w	r3, r3, #8
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_GPIO_Init+0x58>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0308 	and.w	r3, r3, #8
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <HAL_MspInit+0x5c>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x5c>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_MspInit+0x60>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <HAL_MspInit+0x60>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010000 	.word	0x40010000

080004e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a15      	ldr	r2, [pc, #84]	; (8000550 <HAL_I2C_MspInit+0x70>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d123      	bne.n	8000548 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <HAL_I2C_MspInit+0x74>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <HAL_I2C_MspInit+0x74>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_I2C_MspInit+0x74>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000518:	23c0      	movs	r3, #192	; 0xc0
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051c:	2312      	movs	r3, #18
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <HAL_I2C_MspInit+0x78>)
 800052c:	f000 fc02 	bl	8000d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_I2C_MspInit+0x74>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_I2C_MspInit+0x74>)
 8000536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800053a:	61d3      	str	r3, [r2, #28]
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_I2C_MspInit+0x74>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40005400 	.word	0x40005400
 8000554:	40021000 	.word	0x40021000
 8000558:	40010c00 	.word	0x40010c00

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <HAL_UART_MspInit+0x8c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d131      	bne.n	80005e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_UART_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <HAL_UART_MspInit+0x90>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_UART_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <HAL_UART_MspInit+0x90>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_UART_MspInit+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <HAL_UART_MspInit+0x94>)
 80005c2:	f000 fbb7 	bl	8000d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_UART_MspInit+0x94>)
 80005dc:	f000 fbaa 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40013800 	.word	0x40013800
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 fa57 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <_sbrk+0x5c>)
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <_sbrk+0x60>)
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <_sbrk+0x64>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <_sbrk+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	429a      	cmp	r2, r3
 8000672:	d207      	bcs.n	8000684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000674:	f002 f8e0 	bl	8002838 <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	220c      	movs	r2, #12
 800067c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e009      	b.n	8000698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <_sbrk+0x64>)
 8000694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20005000 	.word	0x20005000
 80006a4:	00000400 	.word	0x00000400
 80006a8:	20000164 	.word	0x20000164
 80006ac:	200002b8 	.word	0x200002b8

080006b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006bc:	f7ff fff8 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006c2:	490c      	ldr	r1, [pc, #48]	; (80006f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006d8:	4c09      	ldr	r4, [pc, #36]	; (8000700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e6:	f002 f8ad 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd59 	bl	80001a0 <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80006f8:	08003248 	.word	0x08003248
  ldr r2, =_sbss
 80006fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000700:	200002b4 	.word	0x200002b4

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>

08000706 <BCD_to_dec>:
			Data, Len, 100);
	return (ok == HAL_OK) ? 1 : 0;
	//return __HAL_I2C_GET_FLAG(clock->i2c_bus, HAL_I2C_ERROR_AF) ? 0 : 1; // if ack fail it = true = return 0

}*/
static uint8_t BCD_to_dec(uint8_t num) {
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	71fb      	strb	r3, [r7, #7]

	return (num >> 4) * 10 + (0xf & num);
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	091b      	lsrs	r3, r3, #4
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	4413      	add	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4413      	add	r3, r2
 800072a:	b2db      	uxtb	r3, r3

}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <dec_to_BCD>:
static uint8_t dec_to_BCD(uint8_t num) {
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	uint8_t div = num / 10;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <dec_to_BCD+0x48>)
 8000746:	fba2 2303 	umull	r2, r3, r2, r3
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = num % 10;
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <dec_to_BCD+0x48>)
 8000752:	fba3 1302 	umull	r1, r3, r3, r2
 8000756:	08d9      	lsrs	r1, r3, #3
 8000758:	460b      	mov	r3, r1
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	73bb      	strb	r3, [r7, #14]

	return div << 4 | rem;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	b25a      	sxtb	r2, r3
 800076a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800076e:	4313      	orrs	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2db      	uxtb	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	cccccccd 	.word	0xcccccccd

08000784 <DS1307_INIT>:

ds1307_stat_t DS1307_INIT(ds1307_t *clock) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	uint8_t stat = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
	//clock->i2c_bus = i2c_bus;

	//enable oscillator

	clock->Buffer[0] = 0x00;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
	stat = clock->HW_Interface.write(DS1307_SLA,clock->Buffer, 1);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	2201      	movs	r2, #1
 800079e:	2068      	movs	r0, #104	; 0x68
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]
	stat = clock->HW_Interface.read(DS1307_SLA,clock->Buffer, 1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	2068      	movs	r0, #104	; 0x68
 80007b0:	4798      	blx	r3
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
	if ((clock->Buffer[0]) & (1 << 7) == 0) {	// 1 1010101
												// 1 0000000
												// 1

	} else {
		clock->Buffer[0] = 0x00;  //reg base address
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		clock->Buffer[1] = 0;   //clock hold bit
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	705a      	strb	r2, [r3, #1]
		stat = clock->HW_Interface.write(DS1307_SLA,clock->Buffer, 2);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	2202      	movs	r2, #2
 80007ca:	2068      	movs	r0, #104	; 0x68
 80007cc:	4798      	blx	r3
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
	}

	if (stat == 1) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d101      	bne.n	80007dc <DS1307_INIT+0x58>
		return DS1307_OK;
 80007d8:	2301      	movs	r3, #1
 80007da:	e000      	b.n	80007de <DS1307_INIT+0x5a>
	} else {
		return DS1307_NOK;
 80007dc:	2300      	movs	r3, #0
	}

}
 80007de:	4618      	mov	r0, r3
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <DS1307_Set>:
ds1307_stat_t DS1307_Set(ds1307_t *clock) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]

	clock->Buffer[0] = start_address;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
	clock->Buffer[1] = dec_to_BCD(clock->sec);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff9d 	bl	8000738 <dec_to_BCD>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	705a      	strb	r2, [r3, #1]
	clock->Buffer[2] = dec_to_BCD(clock->min);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7a5b      	ldrb	r3, [r3, #9]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff94 	bl	8000738 <dec_to_BCD>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	709a      	strb	r2, [r3, #2]
	if (clock->format == 1) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7c5b      	ldrb	r3, [r3, #17]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01c      	beq.n	8000860 <DS1307_Set+0x7a>
		clock->Buffer[3] = dec_to_BCD(clock->hour) | (clock->format << 6)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7a9b      	ldrb	r3, [r3, #10]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff84 	bl	8000738 <dec_to_BCD>
 8000830:	4603      	mov	r3, r0
 8000832:	b25a      	sxtb	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7c5b      	ldrb	r3, [r3, #17]
 8000838:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	b25b      	sxtb	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b25a      	sxtb	r2, r3
				| (clock->PM_AM << 5);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7c5b      	ldrb	r3, [r3, #17]
 800084a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	015b      	lsls	r3, r3, #5
 8000852:	b25b      	sxtb	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b25b      	sxtb	r3, r3
 8000858:	b2da      	uxtb	r2, r3
		clock->Buffer[3] = dec_to_BCD(clock->hour) | (clock->format << 6)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	70da      	strb	r2, [r3, #3]
 800085e:	e012      	b.n	8000886 <DS1307_Set+0xa0>
	} else {
		clock->Buffer[3] = dec_to_BCD(clock->hour) | (clock->format << 6);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7a9b      	ldrb	r3, [r3, #10]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff67 	bl	8000738 <dec_to_BCD>
 800086a:	4603      	mov	r3, r0
 800086c:	b25a      	sxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7c5b      	ldrb	r3, [r3, #17]
 8000872:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	b25b      	sxtb	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b25b      	sxtb	r3, r3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	70da      	strb	r2, [r3, #3]
	}
	//clock->Buffer[3] = dec_to_BCD(clock->hour) & 0x1f | (1 << 7); //5bits only
	clock->Buffer[4] = dec_to_BCD(clock->day) & 0x7;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7adb      	ldrb	r3, [r3, #11]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff54 	bl	8000738 <dec_to_BCD>
 8000890:	4603      	mov	r3, r0
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	b2da      	uxtb	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	711a      	strb	r2, [r3, #4]
	clock->Buffer[5] = dec_to_BCD(clock->date) & 0x3f;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7b1b      	ldrb	r3, [r3, #12]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff49 	bl	8000738 <dec_to_BCD>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	715a      	strb	r2, [r3, #5]
	clock->Buffer[6] = dec_to_BCD(clock->month) & 0x1f;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7b5b      	ldrb	r3, [r3, #13]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff3e 	bl	8000738 <dec_to_BCD>
 80008bc:	4603      	mov	r3, r0
 80008be:	f003 031f 	and.w	r3, r3, #31
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	719a      	strb	r2, [r3, #6]
	clock->Buffer[7] = dec_to_BCD(clock->year - 2000);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	89db      	ldrh	r3, [r3, #14]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3330      	adds	r3, #48	; 0x30
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff30 	bl	8000738 <dec_to_BCD>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	71da      	strb	r2, [r3, #7]

	if (clock->HW_Interface.write(DS1307_SLA,clock->Buffer, 8) == 1) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	2208      	movs	r2, #8
 80008e8:	2068      	movs	r0, #104	; 0x68
 80008ea:	4798      	blx	r3
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d101      	bne.n	80008f6 <DS1307_Set+0x110>
		return DS1307_OK;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <DS1307_Set+0x112>
	} else {
		return DS1307_NOK;
 80008f6:	2300      	movs	r3, #0
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <DS1307_Read>:
ds1307_stat_t DS1307_Read(ds1307_t *clock) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t stat = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
	clock->Buffer[0] = start_address;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	if (clock->HW_Interface.write(DS1307_SLA,clock->Buffer, 1) == 1) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	2068      	movs	r0, #104	; 0x68
 800091c:	4798      	blx	r3
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 8098 	bne.w	8000a56 <DS1307_Read+0x156>

		if (clock->HW_Interface.read(DS1307_SLA,clock->Buffer, 7) == 1) {
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	2207      	movs	r2, #7
 800092e:	2068      	movs	r0, #104	; 0x68
 8000930:	4798      	blx	r3
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	f040 808c 	bne.w	8000a52 <DS1307_Read+0x152>
			clock->sec = BCD_to_dec(clock->Buffer[0] & (0x7f));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fede 	bl	8000706 <BCD_to_dec>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	721a      	strb	r2, [r3, #8]
			clock->min = BCD_to_dec(clock->Buffer[1]);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fed5 	bl	8000706 <BCD_to_dec>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	725a      	strb	r2, [r3, #9]
			clock->format = (clock->Buffer[2] & 0b01000000) >> 6;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	119b      	asrs	r3, r3, #6
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	b2d9      	uxtb	r1, r3
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7c53      	ldrb	r3, [r2, #17]
 8000974:	f361 0300 	bfi	r3, r1, #0, #1
 8000978:	7453      	strb	r3, [r2, #17]
			if (clock->format == 1) {  //12 h form
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7c5b      	ldrb	r3, [r3, #17]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d017      	beq.n	80009b8 <DS1307_Read+0xb8>
				clock->hour = BCD_to_dec(clock->Buffer[2] & 0b00011111);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff feb7 	bl	8000706 <BCD_to_dec>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	729a      	strb	r2, [r3, #10]
				clock->PM_AM = (clock->Buffer[2] & 0b00100000) >> 5;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	789b      	ldrb	r3, [r3, #2]
 80009a4:	115b      	asrs	r3, r3, #5
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	b2d9      	uxtb	r1, r3
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	7c53      	ldrb	r3, [r2, #17]
 80009b0:	f361 0341 	bfi	r3, r1, #1, #1
 80009b4:	7453      	strb	r3, [r2, #17]
 80009b6:	e01a      	b.n	80009ee <DS1307_Read+0xee>
			} else {
				clock->hour = BCD_to_dec(clock->Buffer[2] & 0b00111111);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	789b      	ldrb	r3, [r3, #2]
 80009bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe9f 	bl	8000706 <BCD_to_dec>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	729a      	strb	r2, [r3, #10]
				if (clock->hour > 11) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7a9b      	ldrb	r3, [r3, #10]
 80009d4:	2b0b      	cmp	r3, #11
 80009d6:	d905      	bls.n	80009e4 <DS1307_Read+0xe4>
					clock->PM_AM = 1;
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	7c53      	ldrb	r3, [r2, #17]
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	7453      	strb	r3, [r2, #17]
 80009e2:	e004      	b.n	80009ee <DS1307_Read+0xee>
				} else {
					clock->PM_AM = 0;
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	7c53      	ldrb	r3, [r2, #17]
 80009e8:	f36f 0341 	bfc	r3, #1, #1
 80009ec:	7453      	strb	r3, [r2, #17]
				}
			}
			clock->day = BCD_to_dec(clock->Buffer[3] & 0x7);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	78db      	ldrb	r3, [r3, #3]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe84 	bl	8000706 <BCD_to_dec>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	72da      	strb	r2, [r3, #11]
			clock->date = BCD_to_dec(clock->Buffer[4] & 0x3f);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	791b      	ldrb	r3, [r3, #4]
 8000a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe78 	bl	8000706 <BCD_to_dec>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	731a      	strb	r2, [r3, #12]
			clock->month = BCD_to_dec(clock->Buffer[5] & 0x1f);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	795b      	ldrb	r3, [r3, #5]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fe6c 	bl	8000706 <BCD_to_dec>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	735a      	strb	r2, [r3, #13]
			clock->year = BCD_to_dec(clock->Buffer[6]) + 2000;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	799b      	ldrb	r3, [r3, #6]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe63 	bl	8000706 <BCD_to_dec>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	81da      	strh	r2, [r3, #14]
			return DS1307_OK;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e002      	b.n	8000a58 <DS1307_Read+0x158>
		} else {
			return DS1307_NOK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <DS1307_Read+0x158>
		}

	} else {
		return DS1307_NOK;
 8000a56:	2300      	movs	r3, #0
	}

}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_Init+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_Init+0x28>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 f92b 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	200f      	movs	r0, #15
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fcfe 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f935 	bl	8000d1a <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f90b 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000001c 	.word	0x2000001c
 8000ae4:	20000024 	.word	0x20000024
 8000ae8:	20000020 	.word	0x20000020

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000024 	.word	0x20000024
 8000b0c:	20000168 	.word	0x20000168

08000b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000168 	.word	0x20000168

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffe0 	bl	8000b10 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000024 	.word	0x20000024

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff90 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff49 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5e 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb0 	bl	8000c88 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b08b      	sub	sp, #44	; 0x2c
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e169      	b.n	800101c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 8158 	bne.w	8001016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a9a      	ldr	r2, [pc, #616]	; (8000fd4 <HAL_GPIO_Init+0x2a0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d05e      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d70:	4a98      	ldr	r2, [pc, #608]	; (8000fd4 <HAL_GPIO_Init+0x2a0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d875      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d76:	4a98      	ldr	r2, [pc, #608]	; (8000fd8 <HAL_GPIO_Init+0x2a4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d058      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d7c:	4a96      	ldr	r2, [pc, #600]	; (8000fd8 <HAL_GPIO_Init+0x2a4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d86f      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d82:	4a96      	ldr	r2, [pc, #600]	; (8000fdc <HAL_GPIO_Init+0x2a8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d052      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d88:	4a94      	ldr	r2, [pc, #592]	; (8000fdc <HAL_GPIO_Init+0x2a8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d869      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d8e:	4a94      	ldr	r2, [pc, #592]	; (8000fe0 <HAL_GPIO_Init+0x2ac>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d04c      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000d94:	4a92      	ldr	r2, [pc, #584]	; (8000fe0 <HAL_GPIO_Init+0x2ac>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d863      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000d9a:	4a92      	ldr	r2, [pc, #584]	; (8000fe4 <HAL_GPIO_Init+0x2b0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d046      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
 8000da0:	4a90      	ldr	r2, [pc, #576]	; (8000fe4 <HAL_GPIO_Init+0x2b0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d85d      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d82a      	bhi.n	8000e00 <HAL_GPIO_Init+0xcc>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d859      	bhi.n	8000e62 <HAL_GPIO_Init+0x12e>
 8000dae:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <HAL_GPIO_Init+0x80>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e09 	.word	0x08000e09
 8000dbc:	08000e1b 	.word	0x08000e1b
 8000dc0:	08000e5d 	.word	0x08000e5d
 8000dc4:	08000e63 	.word	0x08000e63
 8000dc8:	08000e63 	.word	0x08000e63
 8000dcc:	08000e63 	.word	0x08000e63
 8000dd0:	08000e63 	.word	0x08000e63
 8000dd4:	08000e63 	.word	0x08000e63
 8000dd8:	08000e63 	.word	0x08000e63
 8000ddc:	08000e63 	.word	0x08000e63
 8000de0:	08000e63 	.word	0x08000e63
 8000de4:	08000e63 	.word	0x08000e63
 8000de8:	08000e63 	.word	0x08000e63
 8000dec:	08000e63 	.word	0x08000e63
 8000df0:	08000e63 	.word	0x08000e63
 8000df4:	08000e63 	.word	0x08000e63
 8000df8:	08000e11 	.word	0x08000e11
 8000dfc:	08000e25 	.word	0x08000e25
 8000e00:	4a79      	ldr	r2, [pc, #484]	; (8000fe8 <HAL_GPIO_Init+0x2b4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e06:	e02c      	b.n	8000e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e029      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	3304      	adds	r3, #4
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e024      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	3308      	adds	r3, #8
 8000e20:	623b      	str	r3, [r7, #32]
          break;
 8000e22:	e01f      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e01a      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e36:	2304      	movs	r3, #4
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e013      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d105      	bne.n	8000e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e44:	2308      	movs	r3, #8
 8000e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	611a      	str	r2, [r3, #16]
          break;
 8000e4e:	e009      	b.n	8000e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e50:	2308      	movs	r3, #8
 8000e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	615a      	str	r2, [r3, #20]
          break;
 8000e5a:	e003      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
          break;
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x130>
          break;
 8000e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2bff      	cmp	r3, #255	; 0xff
 8000e68:	d801      	bhi.n	8000e6e <HAL_GPIO_Init+0x13a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	e001      	b.n	8000e72 <HAL_GPIO_Init+0x13e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3304      	adds	r3, #4
 8000e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2bff      	cmp	r3, #255	; 0xff
 8000e78:	d802      	bhi.n	8000e80 <HAL_GPIO_Init+0x14c>
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	e002      	b.n	8000e86 <HAL_GPIO_Init+0x152>
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	3b08      	subs	r3, #8
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	210f      	movs	r1, #15
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	401a      	ands	r2, r3
 8000e98:	6a39      	ldr	r1, [r7, #32]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80b1 	beq.w	8001016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb4:	4b4d      	ldr	r3, [pc, #308]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <HAL_GPIO_Init+0x2b8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ecc:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_GPIO_Init+0x2bc>)
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a40      	ldr	r2, [pc, #256]	; (8000ff4 <HAL_GPIO_Init+0x2c0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1ec>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3f      	ldr	r2, [pc, #252]	; (8000ff8 <HAL_GPIO_Init+0x2c4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1e8>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <HAL_GPIO_Init+0x2c8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1e4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <HAL_GPIO_Init+0x2cc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1e0>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f14:	2304      	movs	r3, #4
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1ee>
 8000f20:	2300      	movs	r3, #0
 8000f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f32:	492f      	ldr	r1, [pc, #188]	; (8000ff0 <HAL_GPIO_Init+0x2bc>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	492c      	ldr	r1, [pc, #176]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4928      	ldr	r1, [pc, #160]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	4922      	ldr	r1, [pc, #136]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	491e      	ldr	r1, [pc, #120]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4918      	ldr	r1, [pc, #96]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4914      	ldr	r1, [pc, #80]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d021      	beq.n	8001008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	490e      	ldr	r1, [pc, #56]	; (8001004 <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e021      	b.n	8001016 <HAL_GPIO_Init+0x2e2>
 8000fd2:	bf00      	nop
 8000fd4:	10320000 	.word	0x10320000
 8000fd8:	10310000 	.word	0x10310000
 8000fdc:	10220000 	.word	0x10220000
 8000fe0:	10210000 	.word	0x10210000
 8000fe4:	10120000 	.word	0x10120000
 8000fe8:	10110000 	.word	0x10110000
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40011400 	.word	0x40011400
 8001004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_GPIO_Init+0x304>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	43db      	mvns	r3, r3
 8001010:	4909      	ldr	r1, [pc, #36]	; (8001038 <HAL_GPIO_Init+0x304>)
 8001012:	4013      	ands	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	3301      	adds	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	f47f ae8e 	bne.w	8000d48 <HAL_GPIO_Init+0x14>
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	372c      	adds	r7, #44	; 0x2c
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e12b      	b.n	80012a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fa3c 	bl	80004e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2224      	movs	r2, #36	; 0x24
 800106c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800108e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800109e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010a0:	f001 f98c 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80010a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a81      	ldr	r2, [pc, #516]	; (80012b0 <HAL_I2C_Init+0x274>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d807      	bhi.n	80010c0 <HAL_I2C_Init+0x84>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a80      	ldr	r2, [pc, #512]	; (80012b4 <HAL_I2C_Init+0x278>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	bf94      	ite	ls
 80010b8:	2301      	movls	r3, #1
 80010ba:	2300      	movhi	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	e006      	b.n	80010ce <HAL_I2C_Init+0x92>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4a7d      	ldr	r2, [pc, #500]	; (80012b8 <HAL_I2C_Init+0x27c>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	bf94      	ite	ls
 80010c8:	2301      	movls	r3, #1
 80010ca:	2300      	movhi	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e0e7      	b.n	80012a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4a78      	ldr	r2, [pc, #480]	; (80012bc <HAL_I2C_Init+0x280>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	0c9b      	lsrs	r3, r3, #18
 80010e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a6a      	ldr	r2, [pc, #424]	; (80012b0 <HAL_I2C_Init+0x274>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d802      	bhi.n	8001110 <HAL_I2C_Init+0xd4>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3301      	adds	r3, #1
 800110e:	e009      	b.n	8001124 <HAL_I2C_Init+0xe8>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4a69      	ldr	r2, [pc, #420]	; (80012c0 <HAL_I2C_Init+0x284>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	3301      	adds	r3, #1
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	430b      	orrs	r3, r1
 800112a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	495c      	ldr	r1, [pc, #368]	; (80012b0 <HAL_I2C_Init+0x274>)
 8001140:	428b      	cmp	r3, r1
 8001142:	d819      	bhi.n	8001178 <HAL_I2C_Init+0x13c>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1e59      	subs	r1, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001158:	400b      	ands	r3, r1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00a      	beq.n	8001174 <HAL_I2C_Init+0x138>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1e59      	subs	r1, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fbb1 f3f3 	udiv	r3, r1, r3
 800116c:	3301      	adds	r3, #1
 800116e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001172:	e051      	b.n	8001218 <HAL_I2C_Init+0x1dc>
 8001174:	2304      	movs	r3, #4
 8001176:	e04f      	b.n	8001218 <HAL_I2C_Init+0x1dc>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d111      	bne.n	80011a4 <HAL_I2C_Init+0x168>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1e58      	subs	r0, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	440b      	add	r3, r1
 800118e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001192:	3301      	adds	r3, #1
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	e012      	b.n	80011ca <HAL_I2C_Init+0x18e>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1e58      	subs	r0, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	0099      	lsls	r1, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_Init+0x196>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e022      	b.n	8001218 <HAL_I2C_Init+0x1dc>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10e      	bne.n	80011f8 <HAL_I2C_Init+0x1bc>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1e58      	subs	r0, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6859      	ldr	r1, [r3, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	440b      	add	r3, r1
 80011e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f6:	e00f      	b.n	8001218 <HAL_I2C_Init+0x1dc>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e58      	subs	r0, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6859      	ldr	r1, [r3, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	0099      	lsls	r1, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	fbb0 f3f3 	udiv	r3, r0, r3
 800120e:	3301      	adds	r3, #1
 8001210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	6809      	ldr	r1, [r1, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69da      	ldr	r2, [r3, #28]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6911      	ldr	r1, [r2, #16]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68d2      	ldr	r2, [r2, #12]
 8001252:	4311      	orrs	r1, r2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	430b      	orrs	r3, r1
 800125a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2220      	movs	r2, #32
 8001292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	000186a0 	.word	0x000186a0
 80012b4:	001e847f 	.word	0x001e847f
 80012b8:	003d08ff 	.word	0x003d08ff
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	10624dd3 	.word	0x10624dd3

080012c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	460b      	mov	r3, r1
 80012d2:	817b      	strh	r3, [r7, #10]
 80012d4:	4613      	mov	r3, r2
 80012d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff fc18 	bl	8000b10 <HAL_GetTick>
 80012e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	f040 824b 	bne.w	8001786 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2319      	movs	r3, #25
 80012f6:	2201      	movs	r2, #1
 80012f8:	497f      	ldr	r1, [pc, #508]	; (80014f8 <HAL_I2C_Master_Receive+0x234>)
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 fb1c 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001306:	2302      	movs	r3, #2
 8001308:	e23e      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_I2C_Master_Receive+0x54>
 8001314:	2302      	movs	r3, #2
 8001316:	e237      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d007      	beq.n	800133e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800134c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2222      	movs	r2, #34	; 0x22
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2210      	movs	r2, #16
 800135a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	893a      	ldrh	r2, [r7, #8]
 800136e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a5f      	ldr	r2, [pc, #380]	; (80014fc <HAL_I2C_Master_Receive+0x238>)
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001380:	8979      	ldrh	r1, [r7, #10]
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 fa08 	bl	800179c <I2C_MasterRequestRead>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1f8      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139a:	2b00      	cmp	r3, #0
 800139c:	d113      	bne.n	80013c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e1cc      	b.n	8001760 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d11e      	bne.n	800140c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013de:	b672      	cpsid	i
}
 80013e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001406:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001408:	b662      	cpsie	i
}
 800140a:	e035      	b.n	8001478 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001410:	2b02      	cmp	r3, #2
 8001412:	d11e      	bne.n	8001452 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001422:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800144c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800144e:	b662      	cpsie	i
}
 8001450:	e012      	b.n	8001478 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001478:	e172      	b.n	8001760 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147e:	2b03      	cmp	r3, #3
 8001480:	f200 811f 	bhi.w	80016c2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	2b01      	cmp	r3, #1
 800148a:	d123      	bne.n	80014d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fb6b 	bl	8001b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e173      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014d2:	e145      	b.n	8001760 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d152      	bne.n	8001582 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e2:	2200      	movs	r2, #0
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <HAL_I2C_Master_Receive+0x23c>)
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fa26 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d008      	beq.n	8001504 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e148      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
 80014f6:	bf00      	nop
 80014f8:	00100002 	.word	0x00100002
 80014fc:	ffff0000 	.word	0xffff0000
 8001500:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	3b01      	subs	r3, #1
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800154a:	b662      	cpsie	i
}
 800154c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	3b01      	subs	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001580:	e0ee      	b.n	8001760 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001588:	2200      	movs	r2, #0
 800158a:	4981      	ldr	r1, [pc, #516]	; (8001790 <HAL_I2C_Master_Receive+0x4cc>)
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f9d3 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0f5      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015e2:	4b6c      	ldr	r3, [pc, #432]	; (8001794 <HAL_I2C_Master_Receive+0x4d0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <HAL_I2C_Master_Receive+0x4d4>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0a1a      	lsrs	r2, r3, #8
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00da      	lsls	r2, r3, #3
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	3b01      	subs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d118      	bne.n	800163a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0220 	orr.w	r2, r3, #32
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800162a:	b662      	cpsie	i
}
 800162c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0a6      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b04      	cmp	r3, #4
 8001646:	d1d9      	bne.n	80015fc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800168a:	b662      	cpsie	i
}
 800168c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016c0:	e04e      	b.n	8001760 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa50 	bl	8001b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e058      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b04      	cmp	r3, #4
 8001714:	d124      	bne.n	8001760 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800172c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f ae88 	bne.w	800147a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	00010004 	.word	0x00010004
 8001794:	2000001c 	.word	0x2000001c
 8001798:	14f8b589 	.word	0x14f8b589

0800179c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	460b      	mov	r3, r1
 80017aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d006      	beq.n	80017d6 <I2C_MasterRequestRead+0x3a>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d003      	beq.n	80017d6 <I2C_MasterRequestRead+0x3a>
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017d4:	d108      	bne.n	80017e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e00b      	b.n	8001800 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	2b11      	cmp	r3, #17
 80017ee:	d107      	bne.n	8001800 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f893 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001826:	d103      	bne.n	8001830 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e079      	b.n	8001928 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800183c:	d108      	bne.n	8001850 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	e05f      	b.n	8001910 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	11db      	asrs	r3, r3, #7
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 0306 	and.w	r3, r3, #6
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f063 030f 	orn	r3, r3, #15
 8001860:	b2da      	uxtb	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4930      	ldr	r1, [pc, #192]	; (8001930 <I2C_MasterRequestRead+0x194>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f8dc 	bl	8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e054      	b.n	8001928 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4929      	ldr	r1, [pc, #164]	; (8001934 <I2C_MasterRequestRead+0x198>)
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f8cc 	bl	8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e044      	b.n	8001928 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f831 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ea:	d103      	bne.n	80018f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e017      	b.n	8001928 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	11db      	asrs	r3, r3, #7
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 0306 	and.w	r3, r3, #6
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f063 030e 	orn	r3, r3, #14
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <I2C_MasterRequestRead+0x198>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f888 	bl	8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	00010008 	.word	0x00010008
 8001934:	00010002 	.word	0x00010002

08001938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001948:	e048      	b.n	80019dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d044      	beq.n	80019dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001952:	f7ff f8dd 	bl	8000b10 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d302      	bcc.n	8001968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d139      	bne.n	80019dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10d      	bne.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	43da      	mvns	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4013      	ands	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	e00c      	b.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	43da      	mvns	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4013      	ands	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d116      	bne.n	80019dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e023      	b.n	8001a24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10d      	bne.n	8001a02 <I2C_WaitOnFlagUntilTimeout+0xca>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	43da      	mvns	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	4013      	ands	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	e00c      	b.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d093      	beq.n	800194a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a3a:	e071      	b.n	8001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d123      	bne.n	8001a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f043 0204 	orr.w	r2, r3, #4
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e067      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d041      	beq.n	8001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9c:	f7ff f838 	bl	8000b10 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d302      	bcc.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d136      	bne.n	8001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d10c      	bne.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e00b      	b.n	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d016      	beq.n	8001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f043 0220 	orr.w	r2, r3, #32
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e021      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10c      	bne.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4013      	ands	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e00b      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f47f af6d 	bne.w	8001a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b78:	e049      	b.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d119      	bne.n	8001bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0210 	mvn.w	r2, #16
 8001b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e030      	b.n	8001c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7fe ffa8 	bl	8000b10 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d302      	bcc.n	8001bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d11d      	bne.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d016      	beq.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f043 0220 	orr.w	r2, r3, #32
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d1ae      	bne.n	8001b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e272      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d06c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x12c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d168      	bne.n	8001d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e24c      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x76>
 8001c90:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a7f      	ldr	r2, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7a      	ldr	r2, [pc, #488]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xbc>
 8001cca:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001ce4:	4b6b      	ldr	r3, [pc, #428]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6a      	ldr	r2, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a67      	ldr	r2, [pc, #412]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe ff04 	bl	8000b10 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7fe ff00 	bl	8000b10 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e200      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe4>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe fef0 	bl	8000b10 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7fe feec 	bl	8000b10 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1ec      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x10c>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e1c0      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4939      	ldr	r1, [pc, #228]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e03a      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fea5 	bl	8000b10 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7fe fea1 	bl	8000b10 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1a1      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4927      	ldr	r1, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe fe84 	bl	8000b10 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fe80 	bl	8000b10 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e180      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d03a      	beq.n	8001eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d019      	beq.n	8001e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7fe fe64 	bl	8000b10 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fe60 	bl	8000b10 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e160      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 face 	bl	800240c <RCC_Delay>
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7fe fe4a 	bl	8000b10 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7fe fe46 	bl	8000b10 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d908      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e146      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	42420000 	.word	0x42420000
 8001e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e9      	bne.n	8001e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a6 	beq.w	8002006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b8b      	ldr	r3, [pc, #556]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b88      	ldr	r3, [pc, #544]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a87      	ldr	r2, [pc, #540]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b85      	ldr	r3, [pc, #532]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b82      	ldr	r3, [pc, #520]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b7f      	ldr	r3, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7e      	ldr	r2, [pc, #504]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fe07 	bl	8000b10 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7fe fe03 	bl	8000b10 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e103      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x312>
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e02d      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x334>
 8001f42:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a69      	ldr	r2, [pc, #420]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a66      	ldr	r2, [pc, #408]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	e01c      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x356>
 8001f64:	4b61      	ldr	r3, [pc, #388]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a60      	ldr	r2, [pc, #384]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a5a      	ldr	r2, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	4b58      	ldr	r3, [pc, #352]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d015      	beq.n	8001fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe fdb7 	bl	8000b10 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7fe fdb3 	bl	8000b10 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0b1      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x37e>
 8001fc8:	e014      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fda1 	bl	8000b10 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fd9d 	bl	8000b10 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d061      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d146      	bne.n	80020b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe fd71 	bl	8000b10 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe fd6d 	bl	8000b10 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e06d      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4921      	ldr	r1, [pc, #132]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a19      	ldr	r1, [r3, #32]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	430b      	orrs	r3, r1
 800207e:	491b      	ldr	r1, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fd41 	bl	8000b10 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe fd3d 	bl	8000b10 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e03d      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x46a>
 80020b0:	e035      	b.n	800211e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fd2a 	bl	8000b10 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fd26 	bl	8000b10 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e026      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x498>
 80020de:	e01e      	b.n	800211e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e019      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_OscConfig+0x500>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	429a      	cmp	r2, r3
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d0      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4965      	ldr	r1, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d040      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e073      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4936      	ldr	r1, [pc, #216]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7fe fc78 	bl	8000b10 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fc74 	bl	8000b10 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e053      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1cc>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1d0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fbd6 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	080031e0 	.word	0x080031e0
 80022f8:	2000001c 	.word	0x2000001c
 80022fc:	20000020 	.word	0x20000020

08002300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_GetSysClockFreq+0x94>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x30>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x36>
 800232e:	e027      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	e027      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_GetSysClockFreq+0x94>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0c5b      	lsrs	r3, r3, #17
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e004      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	613b      	str	r3, [r7, #16]
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002382:	613b      	str	r3, [r7, #16]
      break;
 8002384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002386:	693b      	ldr	r3, [r7, #16]
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	007a1200 	.word	0x007a1200
 800239c:	080031f8 	.word	0x080031f8
 80023a0:	08003208 	.word	0x08003208
 80023a4:	003d0900 	.word	0x003d0900

080023a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	2000001c 	.word	0x2000001c

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c0:	f7ff fff2 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080031f0 	.word	0x080031f0

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0adb      	lsrs	r3, r3, #11
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	080031f0 	.word	0x080031f0

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	2000001c 	.word	0x2000001c
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e042      	b.n	80024e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f874 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f91d 	bl	80026cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b20      	cmp	r3, #32
 8002506:	d16d      	bne.n	80025e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_UART_Transmit+0x2c>
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e066      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2221      	movs	r2, #33	; 0x21
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002526:	f7fe faf3 	bl	8000b10 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002540:	d108      	bne.n	8002554 <HAL_UART_Transmit+0x6c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e003      	b.n	800255c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800255c:	e02a      	b.n	80025b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f840 	bl	80025ee <UART_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e036      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800258c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	3302      	adds	r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	e007      	b.n	80025a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1cf      	bne.n	800255e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2140      	movs	r1, #64	; 0x40
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f810 	bl	80025ee <UART_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e006      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b090      	sub	sp, #64	; 0x40
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025fe:	e050      	b.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d04c      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <UART_WaitOnFlagUntilTimeout+0x30>
 800260e:	f7fe fa7f 	bl	8000b10 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800261a:	429a      	cmp	r2, r3
 800261c:	d241      	bcs.n	80026a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800263e:	637a      	str	r2, [r7, #52]	; 0x34
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e5      	bne.n	800261e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	613b      	str	r3, [r7, #16]
   return(result);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3314      	adds	r3, #20
 8002670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002672:	623a      	str	r2, [r7, #32]
 8002674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002676:	69f9      	ldr	r1, [r7, #28]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e5      	bne.n	8002652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e00f      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4013      	ands	r3, r2
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d09f      	beq.n	8002600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3740      	adds	r7, #64	; 0x40
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002706:	f023 030c 	bic.w	r3, r3, #12
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	430b      	orrs	r3, r1
 8002712:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2c      	ldr	r2, [pc, #176]	; (80027e0 <UART_SetConfig+0x114>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002734:	f7ff fe56 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	e002      	b.n	8002742 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800273c:	f7ff fe3e 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009a      	lsls	r2, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <UART_SetConfig+0x118>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	0119      	lsls	r1, r3, #4
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <UART_SetConfig+0x118>)
 800277a:	fba3 0302 	umull	r0, r3, r3, r2
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	fb00 f303 	mul.w	r3, r0, r3
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	3332      	adds	r3, #50	; 0x32
 800278c:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <UART_SetConfig+0x118>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002798:	4419      	add	r1, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009a      	lsls	r2, r3, #2
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <UART_SetConfig+0x118>)
 80027b2:	fba3 0302 	umull	r0, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	fb00 f303 	mul.w	r3, r0, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	3332      	adds	r3, #50	; 0x32
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <UART_SetConfig+0x118>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	f003 020f 	and.w	r2, r3, #15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	440a      	add	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40013800 	.word	0x40013800
 80027e4:	51eb851f 	.word	0x51eb851f

080027e8 <siprintf>:
 80027e8:	b40e      	push	{r1, r2, r3}
 80027ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027ee:	b500      	push	{lr}
 80027f0:	b09c      	sub	sp, #112	; 0x70
 80027f2:	ab1d      	add	r3, sp, #116	; 0x74
 80027f4:	9002      	str	r0, [sp, #8]
 80027f6:	9006      	str	r0, [sp, #24]
 80027f8:	9107      	str	r1, [sp, #28]
 80027fa:	9104      	str	r1, [sp, #16]
 80027fc:	4808      	ldr	r0, [pc, #32]	; (8002820 <siprintf+0x38>)
 80027fe:	4909      	ldr	r1, [pc, #36]	; (8002824 <siprintf+0x3c>)
 8002800:	f853 2b04 	ldr.w	r2, [r3], #4
 8002804:	9105      	str	r1, [sp, #20]
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	a902      	add	r1, sp, #8
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	f000 f98e 	bl	8002b2c <_svfiprintf_r>
 8002810:	2200      	movs	r2, #0
 8002812:	9b02      	ldr	r3, [sp, #8]
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	b01c      	add	sp, #112	; 0x70
 8002818:	f85d eb04 	ldr.w	lr, [sp], #4
 800281c:	b003      	add	sp, #12
 800281e:	4770      	bx	lr
 8002820:	20000074 	.word	0x20000074
 8002824:	ffff0208 	.word	0xffff0208

08002828 <memset>:
 8002828:	4603      	mov	r3, r0
 800282a:	4402      	add	r2, r0
 800282c:	4293      	cmp	r3, r2
 800282e:	d100      	bne.n	8002832 <memset+0xa>
 8002830:	4770      	bx	lr
 8002832:	f803 1b01 	strb.w	r1, [r3], #1
 8002836:	e7f9      	b.n	800282c <memset+0x4>

08002838 <__errno>:
 8002838:	4b01      	ldr	r3, [pc, #4]	; (8002840 <__errno+0x8>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000074 	.word	0x20000074

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	2600      	movs	r6, #0
 8002848:	4d0c      	ldr	r5, [pc, #48]	; (800287c <__libc_init_array+0x38>)
 800284a:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <__libc_init_array+0x3c>)
 800284c:	1b64      	subs	r4, r4, r5
 800284e:	10a4      	asrs	r4, r4, #2
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	f000 fc7a 	bl	800314c <_init>
 8002858:	2600      	movs	r6, #0
 800285a:	4d0a      	ldr	r5, [pc, #40]	; (8002884 <__libc_init_array+0x40>)
 800285c:	4c0a      	ldr	r4, [pc, #40]	; (8002888 <__libc_init_array+0x44>)
 800285e:	1b64      	subs	r4, r4, r5
 8002860:	10a4      	asrs	r4, r4, #2
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	08003240 	.word	0x08003240
 8002880:	08003240 	.word	0x08003240
 8002884:	08003240 	.word	0x08003240
 8002888:	08003244 	.word	0x08003244

0800288c <__retarget_lock_acquire_recursive>:
 800288c:	4770      	bx	lr

0800288e <__retarget_lock_release_recursive>:
 800288e:	4770      	bx	lr

08002890 <_free_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	4605      	mov	r5, r0
 8002894:	2900      	cmp	r1, #0
 8002896:	d040      	beq.n	800291a <_free_r+0x8a>
 8002898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800289c:	1f0c      	subs	r4, r1, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bfb8      	it	lt
 80028a2:	18e4      	addlt	r4, r4, r3
 80028a4:	f000 f8dc 	bl	8002a60 <__malloc_lock>
 80028a8:	4a1c      	ldr	r2, [pc, #112]	; (800291c <_free_r+0x8c>)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	b933      	cbnz	r3, 80028bc <_free_r+0x2c>
 80028ae:	6063      	str	r3, [r4, #4]
 80028b0:	6014      	str	r4, [r2, #0]
 80028b2:	4628      	mov	r0, r5
 80028b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028b8:	f000 b8d8 	b.w	8002a6c <__malloc_unlock>
 80028bc:	42a3      	cmp	r3, r4
 80028be:	d908      	bls.n	80028d2 <_free_r+0x42>
 80028c0:	6820      	ldr	r0, [r4, #0]
 80028c2:	1821      	adds	r1, r4, r0
 80028c4:	428b      	cmp	r3, r1
 80028c6:	bf01      	itttt	eq
 80028c8:	6819      	ldreq	r1, [r3, #0]
 80028ca:	685b      	ldreq	r3, [r3, #4]
 80028cc:	1809      	addeq	r1, r1, r0
 80028ce:	6021      	streq	r1, [r4, #0]
 80028d0:	e7ed      	b.n	80028ae <_free_r+0x1e>
 80028d2:	461a      	mov	r2, r3
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	b10b      	cbz	r3, 80028dc <_free_r+0x4c>
 80028d8:	42a3      	cmp	r3, r4
 80028da:	d9fa      	bls.n	80028d2 <_free_r+0x42>
 80028dc:	6811      	ldr	r1, [r2, #0]
 80028de:	1850      	adds	r0, r2, r1
 80028e0:	42a0      	cmp	r0, r4
 80028e2:	d10b      	bne.n	80028fc <_free_r+0x6c>
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	4401      	add	r1, r0
 80028e8:	1850      	adds	r0, r2, r1
 80028ea:	4283      	cmp	r3, r0
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	d1e0      	bne.n	80028b2 <_free_r+0x22>
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4408      	add	r0, r1
 80028f6:	6010      	str	r0, [r2, #0]
 80028f8:	6053      	str	r3, [r2, #4]
 80028fa:	e7da      	b.n	80028b2 <_free_r+0x22>
 80028fc:	d902      	bls.n	8002904 <_free_r+0x74>
 80028fe:	230c      	movs	r3, #12
 8002900:	602b      	str	r3, [r5, #0]
 8002902:	e7d6      	b.n	80028b2 <_free_r+0x22>
 8002904:	6820      	ldr	r0, [r4, #0]
 8002906:	1821      	adds	r1, r4, r0
 8002908:	428b      	cmp	r3, r1
 800290a:	bf01      	itttt	eq
 800290c:	6819      	ldreq	r1, [r3, #0]
 800290e:	685b      	ldreq	r3, [r3, #4]
 8002910:	1809      	addeq	r1, r1, r0
 8002912:	6021      	streq	r1, [r4, #0]
 8002914:	6063      	str	r3, [r4, #4]
 8002916:	6054      	str	r4, [r2, #4]
 8002918:	e7cb      	b.n	80028b2 <_free_r+0x22>
 800291a:	bd38      	pop	{r3, r4, r5, pc}
 800291c:	200002ac 	.word	0x200002ac

08002920 <sbrk_aligned>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	4e0e      	ldr	r6, [pc, #56]	; (800295c <sbrk_aligned+0x3c>)
 8002924:	460c      	mov	r4, r1
 8002926:	6831      	ldr	r1, [r6, #0]
 8002928:	4605      	mov	r5, r0
 800292a:	b911      	cbnz	r1, 8002932 <sbrk_aligned+0x12>
 800292c:	f000 fbaa 	bl	8003084 <_sbrk_r>
 8002930:	6030      	str	r0, [r6, #0]
 8002932:	4621      	mov	r1, r4
 8002934:	4628      	mov	r0, r5
 8002936:	f000 fba5 	bl	8003084 <_sbrk_r>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	d00a      	beq.n	8002954 <sbrk_aligned+0x34>
 800293e:	1cc4      	adds	r4, r0, #3
 8002940:	f024 0403 	bic.w	r4, r4, #3
 8002944:	42a0      	cmp	r0, r4
 8002946:	d007      	beq.n	8002958 <sbrk_aligned+0x38>
 8002948:	1a21      	subs	r1, r4, r0
 800294a:	4628      	mov	r0, r5
 800294c:	f000 fb9a 	bl	8003084 <_sbrk_r>
 8002950:	3001      	adds	r0, #1
 8002952:	d101      	bne.n	8002958 <sbrk_aligned+0x38>
 8002954:	f04f 34ff 	mov.w	r4, #4294967295
 8002958:	4620      	mov	r0, r4
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	200002b0 	.word	0x200002b0

08002960 <_malloc_r>:
 8002960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002964:	1ccd      	adds	r5, r1, #3
 8002966:	f025 0503 	bic.w	r5, r5, #3
 800296a:	3508      	adds	r5, #8
 800296c:	2d0c      	cmp	r5, #12
 800296e:	bf38      	it	cc
 8002970:	250c      	movcc	r5, #12
 8002972:	2d00      	cmp	r5, #0
 8002974:	4607      	mov	r7, r0
 8002976:	db01      	blt.n	800297c <_malloc_r+0x1c>
 8002978:	42a9      	cmp	r1, r5
 800297a:	d905      	bls.n	8002988 <_malloc_r+0x28>
 800297c:	230c      	movs	r3, #12
 800297e:	2600      	movs	r6, #0
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4630      	mov	r0, r6
 8002984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a5c <_malloc_r+0xfc>
 800298c:	f000 f868 	bl	8002a60 <__malloc_lock>
 8002990:	f8d8 3000 	ldr.w	r3, [r8]
 8002994:	461c      	mov	r4, r3
 8002996:	bb5c      	cbnz	r4, 80029f0 <_malloc_r+0x90>
 8002998:	4629      	mov	r1, r5
 800299a:	4638      	mov	r0, r7
 800299c:	f7ff ffc0 	bl	8002920 <sbrk_aligned>
 80029a0:	1c43      	adds	r3, r0, #1
 80029a2:	4604      	mov	r4, r0
 80029a4:	d155      	bne.n	8002a52 <_malloc_r+0xf2>
 80029a6:	f8d8 4000 	ldr.w	r4, [r8]
 80029aa:	4626      	mov	r6, r4
 80029ac:	2e00      	cmp	r6, #0
 80029ae:	d145      	bne.n	8002a3c <_malloc_r+0xdc>
 80029b0:	2c00      	cmp	r4, #0
 80029b2:	d048      	beq.n	8002a46 <_malloc_r+0xe6>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	4631      	mov	r1, r6
 80029b8:	4638      	mov	r0, r7
 80029ba:	eb04 0903 	add.w	r9, r4, r3
 80029be:	f000 fb61 	bl	8003084 <_sbrk_r>
 80029c2:	4581      	cmp	r9, r0
 80029c4:	d13f      	bne.n	8002a46 <_malloc_r+0xe6>
 80029c6:	6821      	ldr	r1, [r4, #0]
 80029c8:	4638      	mov	r0, r7
 80029ca:	1a6d      	subs	r5, r5, r1
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7ff ffa7 	bl	8002920 <sbrk_aligned>
 80029d2:	3001      	adds	r0, #1
 80029d4:	d037      	beq.n	8002a46 <_malloc_r+0xe6>
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	442b      	add	r3, r5
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	f8d8 3000 	ldr.w	r3, [r8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d038      	beq.n	8002a56 <_malloc_r+0xf6>
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	42a2      	cmp	r2, r4
 80029e8:	d12b      	bne.n	8002a42 <_malloc_r+0xe2>
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e00f      	b.n	8002a10 <_malloc_r+0xb0>
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	1b52      	subs	r2, r2, r5
 80029f4:	d41f      	bmi.n	8002a36 <_malloc_r+0xd6>
 80029f6:	2a0b      	cmp	r2, #11
 80029f8:	d917      	bls.n	8002a2a <_malloc_r+0xca>
 80029fa:	1961      	adds	r1, r4, r5
 80029fc:	42a3      	cmp	r3, r4
 80029fe:	6025      	str	r5, [r4, #0]
 8002a00:	bf18      	it	ne
 8002a02:	6059      	strne	r1, [r3, #4]
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	bf08      	it	eq
 8002a08:	f8c8 1000 	streq.w	r1, [r8]
 8002a0c:	5162      	str	r2, [r4, r5]
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	4638      	mov	r0, r7
 8002a12:	f104 060b 	add.w	r6, r4, #11
 8002a16:	f000 f829 	bl	8002a6c <__malloc_unlock>
 8002a1a:	f026 0607 	bic.w	r6, r6, #7
 8002a1e:	1d23      	adds	r3, r4, #4
 8002a20:	1af2      	subs	r2, r6, r3
 8002a22:	d0ae      	beq.n	8002982 <_malloc_r+0x22>
 8002a24:	1b9b      	subs	r3, r3, r6
 8002a26:	50a3      	str	r3, [r4, r2]
 8002a28:	e7ab      	b.n	8002982 <_malloc_r+0x22>
 8002a2a:	42a3      	cmp	r3, r4
 8002a2c:	6862      	ldr	r2, [r4, #4]
 8002a2e:	d1dd      	bne.n	80029ec <_malloc_r+0x8c>
 8002a30:	f8c8 2000 	str.w	r2, [r8]
 8002a34:	e7ec      	b.n	8002a10 <_malloc_r+0xb0>
 8002a36:	4623      	mov	r3, r4
 8002a38:	6864      	ldr	r4, [r4, #4]
 8002a3a:	e7ac      	b.n	8002996 <_malloc_r+0x36>
 8002a3c:	4634      	mov	r4, r6
 8002a3e:	6876      	ldr	r6, [r6, #4]
 8002a40:	e7b4      	b.n	80029ac <_malloc_r+0x4c>
 8002a42:	4613      	mov	r3, r2
 8002a44:	e7cc      	b.n	80029e0 <_malloc_r+0x80>
 8002a46:	230c      	movs	r3, #12
 8002a48:	4638      	mov	r0, r7
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	f000 f80e 	bl	8002a6c <__malloc_unlock>
 8002a50:	e797      	b.n	8002982 <_malloc_r+0x22>
 8002a52:	6025      	str	r5, [r4, #0]
 8002a54:	e7dc      	b.n	8002a10 <_malloc_r+0xb0>
 8002a56:	605b      	str	r3, [r3, #4]
 8002a58:	deff      	udf	#255	; 0xff
 8002a5a:	bf00      	nop
 8002a5c:	200002ac 	.word	0x200002ac

08002a60 <__malloc_lock>:
 8002a60:	4801      	ldr	r0, [pc, #4]	; (8002a68 <__malloc_lock+0x8>)
 8002a62:	f7ff bf13 	b.w	800288c <__retarget_lock_acquire_recursive>
 8002a66:	bf00      	nop
 8002a68:	200002a8 	.word	0x200002a8

08002a6c <__malloc_unlock>:
 8002a6c:	4801      	ldr	r0, [pc, #4]	; (8002a74 <__malloc_unlock+0x8>)
 8002a6e:	f7ff bf0e 	b.w	800288e <__retarget_lock_release_recursive>
 8002a72:	bf00      	nop
 8002a74:	200002a8 	.word	0x200002a8

08002a78 <__ssputs_r>:
 8002a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	461f      	mov	r7, r3
 8002a7e:	688e      	ldr	r6, [r1, #8]
 8002a80:	4682      	mov	sl, r0
 8002a82:	42be      	cmp	r6, r7
 8002a84:	460c      	mov	r4, r1
 8002a86:	4690      	mov	r8, r2
 8002a88:	680b      	ldr	r3, [r1, #0]
 8002a8a:	d82c      	bhi.n	8002ae6 <__ssputs_r+0x6e>
 8002a8c:	898a      	ldrh	r2, [r1, #12]
 8002a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a92:	d026      	beq.n	8002ae2 <__ssputs_r+0x6a>
 8002a94:	6965      	ldr	r5, [r4, #20]
 8002a96:	6909      	ldr	r1, [r1, #16]
 8002a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a9c:	eba3 0901 	sub.w	r9, r3, r1
 8002aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002aa4:	1c7b      	adds	r3, r7, #1
 8002aa6:	444b      	add	r3, r9
 8002aa8:	106d      	asrs	r5, r5, #1
 8002aaa:	429d      	cmp	r5, r3
 8002aac:	bf38      	it	cc
 8002aae:	461d      	movcc	r5, r3
 8002ab0:	0553      	lsls	r3, r2, #21
 8002ab2:	d527      	bpl.n	8002b04 <__ssputs_r+0x8c>
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7ff ff53 	bl	8002960 <_malloc_r>
 8002aba:	4606      	mov	r6, r0
 8002abc:	b360      	cbz	r0, 8002b18 <__ssputs_r+0xa0>
 8002abe:	464a      	mov	r2, r9
 8002ac0:	6921      	ldr	r1, [r4, #16]
 8002ac2:	f000 fafd 	bl	80030c0 <memcpy>
 8002ac6:	89a3      	ldrh	r3, [r4, #12]
 8002ac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	6126      	str	r6, [r4, #16]
 8002ad4:	444e      	add	r6, r9
 8002ad6:	6026      	str	r6, [r4, #0]
 8002ad8:	463e      	mov	r6, r7
 8002ada:	6165      	str	r5, [r4, #20]
 8002adc:	eba5 0509 	sub.w	r5, r5, r9
 8002ae0:	60a5      	str	r5, [r4, #8]
 8002ae2:	42be      	cmp	r6, r7
 8002ae4:	d900      	bls.n	8002ae8 <__ssputs_r+0x70>
 8002ae6:	463e      	mov	r6, r7
 8002ae8:	4632      	mov	r2, r6
 8002aea:	4641      	mov	r1, r8
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	f000 faaf 	bl	8003050 <memmove>
 8002af2:	2000      	movs	r0, #0
 8002af4:	68a3      	ldr	r3, [r4, #8]
 8002af6:	1b9b      	subs	r3, r3, r6
 8002af8:	60a3      	str	r3, [r4, #8]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	4433      	add	r3, r6
 8002afe:	6023      	str	r3, [r4, #0]
 8002b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b04:	462a      	mov	r2, r5
 8002b06:	f000 fae9 	bl	80030dc <_realloc_r>
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1e0      	bne.n	8002ad2 <__ssputs_r+0x5a>
 8002b10:	4650      	mov	r0, sl
 8002b12:	6921      	ldr	r1, [r4, #16]
 8002b14:	f7ff febc 	bl	8002890 <_free_r>
 8002b18:	230c      	movs	r3, #12
 8002b1a:	f8ca 3000 	str.w	r3, [sl]
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b28:	81a3      	strh	r3, [r4, #12]
 8002b2a:	e7e9      	b.n	8002b00 <__ssputs_r+0x88>

08002b2c <_svfiprintf_r>:
 8002b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b30:	4698      	mov	r8, r3
 8002b32:	898b      	ldrh	r3, [r1, #12]
 8002b34:	4607      	mov	r7, r0
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	460d      	mov	r5, r1
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	b09d      	sub	sp, #116	; 0x74
 8002b3e:	d50e      	bpl.n	8002b5e <_svfiprintf_r+0x32>
 8002b40:	690b      	ldr	r3, [r1, #16]
 8002b42:	b963      	cbnz	r3, 8002b5e <_svfiprintf_r+0x32>
 8002b44:	2140      	movs	r1, #64	; 0x40
 8002b46:	f7ff ff0b 	bl	8002960 <_malloc_r>
 8002b4a:	6028      	str	r0, [r5, #0]
 8002b4c:	6128      	str	r0, [r5, #16]
 8002b4e:	b920      	cbnz	r0, 8002b5a <_svfiprintf_r+0x2e>
 8002b50:	230c      	movs	r3, #12
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	e0d0      	b.n	8002cfc <_svfiprintf_r+0x1d0>
 8002b5a:	2340      	movs	r3, #64	; 0x40
 8002b5c:	616b      	str	r3, [r5, #20]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9309      	str	r3, [sp, #36]	; 0x24
 8002b62:	2320      	movs	r3, #32
 8002b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b68:	2330      	movs	r3, #48	; 0x30
 8002b6a:	f04f 0901 	mov.w	r9, #1
 8002b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002d14 <_svfiprintf_r+0x1e8>
 8002b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	469a      	mov	sl, r3
 8002b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b82:	b10a      	cbz	r2, 8002b88 <_svfiprintf_r+0x5c>
 8002b84:	2a25      	cmp	r2, #37	; 0x25
 8002b86:	d1f9      	bne.n	8002b7c <_svfiprintf_r+0x50>
 8002b88:	ebba 0b04 	subs.w	fp, sl, r4
 8002b8c:	d00b      	beq.n	8002ba6 <_svfiprintf_r+0x7a>
 8002b8e:	465b      	mov	r3, fp
 8002b90:	4622      	mov	r2, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	4638      	mov	r0, r7
 8002b96:	f7ff ff6f 	bl	8002a78 <__ssputs_r>
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	f000 80a9 	beq.w	8002cf2 <_svfiprintf_r+0x1c6>
 8002ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ba2:	445a      	add	r2, fp
 8002ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80a1 	beq.w	8002cf2 <_svfiprintf_r+0x1c6>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bba:	f10a 0a01 	add.w	sl, sl, #1
 8002bbe:	9304      	str	r3, [sp, #16]
 8002bc0:	9307      	str	r3, [sp, #28]
 8002bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002bc8:	4654      	mov	r4, sl
 8002bca:	2205      	movs	r2, #5
 8002bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd0:	4850      	ldr	r0, [pc, #320]	; (8002d14 <_svfiprintf_r+0x1e8>)
 8002bd2:	f000 fa67 	bl	80030a4 <memchr>
 8002bd6:	9a04      	ldr	r2, [sp, #16]
 8002bd8:	b9d8      	cbnz	r0, 8002c12 <_svfiprintf_r+0xe6>
 8002bda:	06d0      	lsls	r0, r2, #27
 8002bdc:	bf44      	itt	mi
 8002bde:	2320      	movmi	r3, #32
 8002be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002be4:	0711      	lsls	r1, r2, #28
 8002be6:	bf44      	itt	mi
 8002be8:	232b      	movmi	r3, #43	; 0x2b
 8002bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bee:	f89a 3000 	ldrb.w	r3, [sl]
 8002bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bf4:	d015      	beq.n	8002c22 <_svfiprintf_r+0xf6>
 8002bf6:	4654      	mov	r4, sl
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f04f 0c0a 	mov.w	ip, #10
 8002bfe:	9a07      	ldr	r2, [sp, #28]
 8002c00:	4621      	mov	r1, r4
 8002c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c06:	3b30      	subs	r3, #48	; 0x30
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d94d      	bls.n	8002ca8 <_svfiprintf_r+0x17c>
 8002c0c:	b1b0      	cbz	r0, 8002c3c <_svfiprintf_r+0x110>
 8002c0e:	9207      	str	r2, [sp, #28]
 8002c10:	e014      	b.n	8002c3c <_svfiprintf_r+0x110>
 8002c12:	eba0 0308 	sub.w	r3, r0, r8
 8002c16:	fa09 f303 	lsl.w	r3, r9, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	46a2      	mov	sl, r4
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	e7d2      	b.n	8002bc8 <_svfiprintf_r+0x9c>
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	1d19      	adds	r1, r3, #4
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	9103      	str	r1, [sp, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bfbb      	ittet	lt
 8002c2e:	425b      	neglt	r3, r3
 8002c30:	f042 0202 	orrlt.w	r2, r2, #2
 8002c34:	9307      	strge	r3, [sp, #28]
 8002c36:	9307      	strlt	r3, [sp, #28]
 8002c38:	bfb8      	it	lt
 8002c3a:	9204      	strlt	r2, [sp, #16]
 8002c3c:	7823      	ldrb	r3, [r4, #0]
 8002c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c40:	d10c      	bne.n	8002c5c <_svfiprintf_r+0x130>
 8002c42:	7863      	ldrb	r3, [r4, #1]
 8002c44:	2b2a      	cmp	r3, #42	; 0x2a
 8002c46:	d134      	bne.n	8002cb2 <_svfiprintf_r+0x186>
 8002c48:	9b03      	ldr	r3, [sp, #12]
 8002c4a:	3402      	adds	r4, #2
 8002c4c:	1d1a      	adds	r2, r3, #4
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	9203      	str	r2, [sp, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bfb8      	it	lt
 8002c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c5a:	9305      	str	r3, [sp, #20]
 8002c5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002d18 <_svfiprintf_r+0x1ec>
 8002c60:	2203      	movs	r2, #3
 8002c62:	4650      	mov	r0, sl
 8002c64:	7821      	ldrb	r1, [r4, #0]
 8002c66:	f000 fa1d 	bl	80030a4 <memchr>
 8002c6a:	b138      	cbz	r0, 8002c7c <_svfiprintf_r+0x150>
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	9b04      	ldr	r3, [sp, #16]
 8002c70:	eba0 000a 	sub.w	r0, r0, sl
 8002c74:	4082      	lsls	r2, r0
 8002c76:	4313      	orrs	r3, r2
 8002c78:	3401      	adds	r4, #1
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c80:	2206      	movs	r2, #6
 8002c82:	4826      	ldr	r0, [pc, #152]	; (8002d1c <_svfiprintf_r+0x1f0>)
 8002c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c88:	f000 fa0c 	bl	80030a4 <memchr>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d038      	beq.n	8002d02 <_svfiprintf_r+0x1d6>
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <_svfiprintf_r+0x1f4>)
 8002c92:	bb1b      	cbnz	r3, 8002cdc <_svfiprintf_r+0x1b0>
 8002c94:	9b03      	ldr	r3, [sp, #12]
 8002c96:	3307      	adds	r3, #7
 8002c98:	f023 0307 	bic.w	r3, r3, #7
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ca2:	4433      	add	r3, r6
 8002ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ca6:	e768      	b.n	8002b7a <_svfiprintf_r+0x4e>
 8002ca8:	460c      	mov	r4, r1
 8002caa:	2001      	movs	r0, #1
 8002cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cb0:	e7a6      	b.n	8002c00 <_svfiprintf_r+0xd4>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f04f 0c0a 	mov.w	ip, #10
 8002cb8:	4619      	mov	r1, r3
 8002cba:	3401      	adds	r4, #1
 8002cbc:	9305      	str	r3, [sp, #20]
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cc4:	3a30      	subs	r2, #48	; 0x30
 8002cc6:	2a09      	cmp	r2, #9
 8002cc8:	d903      	bls.n	8002cd2 <_svfiprintf_r+0x1a6>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0c6      	beq.n	8002c5c <_svfiprintf_r+0x130>
 8002cce:	9105      	str	r1, [sp, #20]
 8002cd0:	e7c4      	b.n	8002c5c <_svfiprintf_r+0x130>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cda:	e7f0      	b.n	8002cbe <_svfiprintf_r+0x192>
 8002cdc:	ab03      	add	r3, sp, #12
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	462a      	mov	r2, r5
 8002ce2:	4638      	mov	r0, r7
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <_svfiprintf_r+0x1f8>)
 8002ce6:	a904      	add	r1, sp, #16
 8002ce8:	f3af 8000 	nop.w
 8002cec:	1c42      	adds	r2, r0, #1
 8002cee:	4606      	mov	r6, r0
 8002cf0:	d1d6      	bne.n	8002ca0 <_svfiprintf_r+0x174>
 8002cf2:	89ab      	ldrh	r3, [r5, #12]
 8002cf4:	065b      	lsls	r3, r3, #25
 8002cf6:	f53f af2d 	bmi.w	8002b54 <_svfiprintf_r+0x28>
 8002cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cfc:	b01d      	add	sp, #116	; 0x74
 8002cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d02:	ab03      	add	r3, sp, #12
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	462a      	mov	r2, r5
 8002d08:	4638      	mov	r0, r7
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <_svfiprintf_r+0x1f8>)
 8002d0c:	a904      	add	r1, sp, #16
 8002d0e:	f000 f87d 	bl	8002e0c <_printf_i>
 8002d12:	e7eb      	b.n	8002cec <_svfiprintf_r+0x1c0>
 8002d14:	0800320a 	.word	0x0800320a
 8002d18:	08003210 	.word	0x08003210
 8002d1c:	08003214 	.word	0x08003214
 8002d20:	00000000 	.word	0x00000000
 8002d24:	08002a79 	.word	0x08002a79

08002d28 <_printf_common>:
 8002d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d2c:	4616      	mov	r6, r2
 8002d2e:	4699      	mov	r9, r3
 8002d30:	688a      	ldr	r2, [r1, #8]
 8002d32:	690b      	ldr	r3, [r1, #16]
 8002d34:	4607      	mov	r7, r0
 8002d36:	4293      	cmp	r3, r2
 8002d38:	bfb8      	it	lt
 8002d3a:	4613      	movlt	r3, r2
 8002d3c:	6033      	str	r3, [r6, #0]
 8002d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d42:	460c      	mov	r4, r1
 8002d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d48:	b10a      	cbz	r2, 8002d4e <_printf_common+0x26>
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	6033      	str	r3, [r6, #0]
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	0699      	lsls	r1, r3, #26
 8002d52:	bf42      	ittt	mi
 8002d54:	6833      	ldrmi	r3, [r6, #0]
 8002d56:	3302      	addmi	r3, #2
 8002d58:	6033      	strmi	r3, [r6, #0]
 8002d5a:	6825      	ldr	r5, [r4, #0]
 8002d5c:	f015 0506 	ands.w	r5, r5, #6
 8002d60:	d106      	bne.n	8002d70 <_printf_common+0x48>
 8002d62:	f104 0a19 	add.w	sl, r4, #25
 8002d66:	68e3      	ldr	r3, [r4, #12]
 8002d68:	6832      	ldr	r2, [r6, #0]
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	42ab      	cmp	r3, r5
 8002d6e:	dc2b      	bgt.n	8002dc8 <_printf_common+0xa0>
 8002d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d74:	1e13      	subs	r3, r2, #0
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	bf18      	it	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	0692      	lsls	r2, r2, #26
 8002d7e:	d430      	bmi.n	8002de2 <_printf_common+0xba>
 8002d80:	4649      	mov	r1, r9
 8002d82:	4638      	mov	r0, r7
 8002d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d88:	47c0      	blx	r8
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	d023      	beq.n	8002dd6 <_printf_common+0xae>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	6922      	ldr	r2, [r4, #16]
 8002d92:	f003 0306 	and.w	r3, r3, #6
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	bf14      	ite	ne
 8002d9a:	2500      	movne	r5, #0
 8002d9c:	6833      	ldreq	r3, [r6, #0]
 8002d9e:	f04f 0600 	mov.w	r6, #0
 8002da2:	bf08      	it	eq
 8002da4:	68e5      	ldreq	r5, [r4, #12]
 8002da6:	f104 041a 	add.w	r4, r4, #26
 8002daa:	bf08      	it	eq
 8002dac:	1aed      	subeq	r5, r5, r3
 8002dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002db2:	bf08      	it	eq
 8002db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bfc4      	itt	gt
 8002dbc:	1a9b      	subgt	r3, r3, r2
 8002dbe:	18ed      	addgt	r5, r5, r3
 8002dc0:	42b5      	cmp	r5, r6
 8002dc2:	d11a      	bne.n	8002dfa <_printf_common+0xd2>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	e008      	b.n	8002dda <_printf_common+0xb2>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4652      	mov	r2, sl
 8002dcc:	4649      	mov	r1, r9
 8002dce:	4638      	mov	r0, r7
 8002dd0:	47c0      	blx	r8
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d103      	bne.n	8002dde <_printf_common+0xb6>
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dde:	3501      	adds	r5, #1
 8002de0:	e7c1      	b.n	8002d66 <_printf_common+0x3e>
 8002de2:	2030      	movs	r0, #48	; 0x30
 8002de4:	18e1      	adds	r1, r4, r3
 8002de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002df0:	4422      	add	r2, r4
 8002df2:	3302      	adds	r3, #2
 8002df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002df8:	e7c2      	b.n	8002d80 <_printf_common+0x58>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	4649      	mov	r1, r9
 8002e00:	4638      	mov	r0, r7
 8002e02:	47c0      	blx	r8
 8002e04:	3001      	adds	r0, #1
 8002e06:	d0e6      	beq.n	8002dd6 <_printf_common+0xae>
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7d9      	b.n	8002dc0 <_printf_common+0x98>

08002e0c <_printf_i>:
 8002e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e10:	7e0f      	ldrb	r7, [r1, #24]
 8002e12:	4691      	mov	r9, r2
 8002e14:	2f78      	cmp	r7, #120	; 0x78
 8002e16:	4680      	mov	r8, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	469a      	mov	sl, r3
 8002e1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e22:	d807      	bhi.n	8002e34 <_printf_i+0x28>
 8002e24:	2f62      	cmp	r7, #98	; 0x62
 8002e26:	d80a      	bhi.n	8002e3e <_printf_i+0x32>
 8002e28:	2f00      	cmp	r7, #0
 8002e2a:	f000 80d5 	beq.w	8002fd8 <_printf_i+0x1cc>
 8002e2e:	2f58      	cmp	r7, #88	; 0x58
 8002e30:	f000 80c1 	beq.w	8002fb6 <_printf_i+0x1aa>
 8002e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e3c:	e03a      	b.n	8002eb4 <_printf_i+0xa8>
 8002e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e42:	2b15      	cmp	r3, #21
 8002e44:	d8f6      	bhi.n	8002e34 <_printf_i+0x28>
 8002e46:	a101      	add	r1, pc, #4	; (adr r1, 8002e4c <_printf_i+0x40>)
 8002e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e4c:	08002ea5 	.word	0x08002ea5
 8002e50:	08002eb9 	.word	0x08002eb9
 8002e54:	08002e35 	.word	0x08002e35
 8002e58:	08002e35 	.word	0x08002e35
 8002e5c:	08002e35 	.word	0x08002e35
 8002e60:	08002e35 	.word	0x08002e35
 8002e64:	08002eb9 	.word	0x08002eb9
 8002e68:	08002e35 	.word	0x08002e35
 8002e6c:	08002e35 	.word	0x08002e35
 8002e70:	08002e35 	.word	0x08002e35
 8002e74:	08002e35 	.word	0x08002e35
 8002e78:	08002fbf 	.word	0x08002fbf
 8002e7c:	08002ee5 	.word	0x08002ee5
 8002e80:	08002f79 	.word	0x08002f79
 8002e84:	08002e35 	.word	0x08002e35
 8002e88:	08002e35 	.word	0x08002e35
 8002e8c:	08002fe1 	.word	0x08002fe1
 8002e90:	08002e35 	.word	0x08002e35
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	08002e35 	.word	0x08002e35
 8002e9c:	08002e35 	.word	0x08002e35
 8002ea0:	08002f81 	.word	0x08002f81
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	602a      	str	r2, [r5, #0]
 8002eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0a0      	b.n	8002ffa <_printf_i+0x1ee>
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	0607      	lsls	r7, r0, #24
 8002ebe:	f103 0104 	add.w	r1, r3, #4
 8002ec2:	6029      	str	r1, [r5, #0]
 8002ec4:	d501      	bpl.n	8002eca <_printf_i+0xbe>
 8002ec6:	681e      	ldr	r6, [r3, #0]
 8002ec8:	e003      	b.n	8002ed2 <_printf_i+0xc6>
 8002eca:	0646      	lsls	r6, r0, #25
 8002ecc:	d5fb      	bpl.n	8002ec6 <_printf_i+0xba>
 8002ece:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ed2:	2e00      	cmp	r6, #0
 8002ed4:	da03      	bge.n	8002ede <_printf_i+0xd2>
 8002ed6:	232d      	movs	r3, #45	; 0x2d
 8002ed8:	4276      	negs	r6, r6
 8002eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ede:	230a      	movs	r3, #10
 8002ee0:	4859      	ldr	r0, [pc, #356]	; (8003048 <_printf_i+0x23c>)
 8002ee2:	e012      	b.n	8002f0a <_printf_i+0xfe>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	1d19      	adds	r1, r3, #4
 8002eea:	6029      	str	r1, [r5, #0]
 8002eec:	0605      	lsls	r5, r0, #24
 8002eee:	d501      	bpl.n	8002ef4 <_printf_i+0xe8>
 8002ef0:	681e      	ldr	r6, [r3, #0]
 8002ef2:	e002      	b.n	8002efa <_printf_i+0xee>
 8002ef4:	0641      	lsls	r1, r0, #25
 8002ef6:	d5fb      	bpl.n	8002ef0 <_printf_i+0xe4>
 8002ef8:	881e      	ldrh	r6, [r3, #0]
 8002efa:	2f6f      	cmp	r7, #111	; 0x6f
 8002efc:	bf0c      	ite	eq
 8002efe:	2308      	moveq	r3, #8
 8002f00:	230a      	movne	r3, #10
 8002f02:	4851      	ldr	r0, [pc, #324]	; (8003048 <_printf_i+0x23c>)
 8002f04:	2100      	movs	r1, #0
 8002f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f0a:	6865      	ldr	r5, [r4, #4]
 8002f0c:	2d00      	cmp	r5, #0
 8002f0e:	bfa8      	it	ge
 8002f10:	6821      	ldrge	r1, [r4, #0]
 8002f12:	60a5      	str	r5, [r4, #8]
 8002f14:	bfa4      	itt	ge
 8002f16:	f021 0104 	bicge.w	r1, r1, #4
 8002f1a:	6021      	strge	r1, [r4, #0]
 8002f1c:	b90e      	cbnz	r6, 8002f22 <_printf_i+0x116>
 8002f1e:	2d00      	cmp	r5, #0
 8002f20:	d04b      	beq.n	8002fba <_printf_i+0x1ae>
 8002f22:	4615      	mov	r5, r2
 8002f24:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f28:	fb03 6711 	mls	r7, r3, r1, r6
 8002f2c:	5dc7      	ldrb	r7, [r0, r7]
 8002f2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f32:	4637      	mov	r7, r6
 8002f34:	42bb      	cmp	r3, r7
 8002f36:	460e      	mov	r6, r1
 8002f38:	d9f4      	bls.n	8002f24 <_printf_i+0x118>
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d10b      	bne.n	8002f56 <_printf_i+0x14a>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	07de      	lsls	r6, r3, #31
 8002f42:	d508      	bpl.n	8002f56 <_printf_i+0x14a>
 8002f44:	6923      	ldr	r3, [r4, #16]
 8002f46:	6861      	ldr	r1, [r4, #4]
 8002f48:	4299      	cmp	r1, r3
 8002f4a:	bfde      	ittt	le
 8002f4c:	2330      	movle	r3, #48	; 0x30
 8002f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f56:	1b52      	subs	r2, r2, r5
 8002f58:	6122      	str	r2, [r4, #16]
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	4640      	mov	r0, r8
 8002f60:	f8cd a000 	str.w	sl, [sp]
 8002f64:	aa03      	add	r2, sp, #12
 8002f66:	f7ff fedf 	bl	8002d28 <_printf_common>
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d14a      	bne.n	8003004 <_printf_i+0x1f8>
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f72:	b004      	add	sp, #16
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	6023      	str	r3, [r4, #0]
 8002f80:	2778      	movs	r7, #120	; 0x78
 8002f82:	4832      	ldr	r0, [pc, #200]	; (800304c <_printf_i+0x240>)
 8002f84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	6829      	ldr	r1, [r5, #0]
 8002f8c:	061f      	lsls	r7, r3, #24
 8002f8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f92:	d402      	bmi.n	8002f9a <_printf_i+0x18e>
 8002f94:	065f      	lsls	r7, r3, #25
 8002f96:	bf48      	it	mi
 8002f98:	b2b6      	uxthmi	r6, r6
 8002f9a:	07df      	lsls	r7, r3, #31
 8002f9c:	bf48      	it	mi
 8002f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8002fa2:	6029      	str	r1, [r5, #0]
 8002fa4:	bf48      	it	mi
 8002fa6:	6023      	strmi	r3, [r4, #0]
 8002fa8:	b91e      	cbnz	r6, 8002fb2 <_printf_i+0x1a6>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	f023 0320 	bic.w	r3, r3, #32
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	e7a6      	b.n	8002f04 <_printf_i+0xf8>
 8002fb6:	4824      	ldr	r0, [pc, #144]	; (8003048 <_printf_i+0x23c>)
 8002fb8:	e7e4      	b.n	8002f84 <_printf_i+0x178>
 8002fba:	4615      	mov	r5, r2
 8002fbc:	e7bd      	b.n	8002f3a <_printf_i+0x12e>
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	6826      	ldr	r6, [r4, #0]
 8002fc2:	1d18      	adds	r0, r3, #4
 8002fc4:	6961      	ldr	r1, [r4, #20]
 8002fc6:	6028      	str	r0, [r5, #0]
 8002fc8:	0635      	lsls	r5, r6, #24
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	d501      	bpl.n	8002fd2 <_printf_i+0x1c6>
 8002fce:	6019      	str	r1, [r3, #0]
 8002fd0:	e002      	b.n	8002fd8 <_printf_i+0x1cc>
 8002fd2:	0670      	lsls	r0, r6, #25
 8002fd4:	d5fb      	bpl.n	8002fce <_printf_i+0x1c2>
 8002fd6:	8019      	strh	r1, [r3, #0]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	4615      	mov	r5, r2
 8002fdc:	6123      	str	r3, [r4, #16]
 8002fde:	e7bc      	b.n	8002f5a <_printf_i+0x14e>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	602a      	str	r2, [r5, #0]
 8002fe8:	681d      	ldr	r5, [r3, #0]
 8002fea:	6862      	ldr	r2, [r4, #4]
 8002fec:	4628      	mov	r0, r5
 8002fee:	f000 f859 	bl	80030a4 <memchr>
 8002ff2:	b108      	cbz	r0, 8002ff8 <_printf_i+0x1ec>
 8002ff4:	1b40      	subs	r0, r0, r5
 8002ff6:	6060      	str	r0, [r4, #4]
 8002ff8:	6863      	ldr	r3, [r4, #4]
 8002ffa:	6123      	str	r3, [r4, #16]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003002:	e7aa      	b.n	8002f5a <_printf_i+0x14e>
 8003004:	462a      	mov	r2, r5
 8003006:	4649      	mov	r1, r9
 8003008:	4640      	mov	r0, r8
 800300a:	6923      	ldr	r3, [r4, #16]
 800300c:	47d0      	blx	sl
 800300e:	3001      	adds	r0, #1
 8003010:	d0ad      	beq.n	8002f6e <_printf_i+0x162>
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	079b      	lsls	r3, r3, #30
 8003016:	d413      	bmi.n	8003040 <_printf_i+0x234>
 8003018:	68e0      	ldr	r0, [r4, #12]
 800301a:	9b03      	ldr	r3, [sp, #12]
 800301c:	4298      	cmp	r0, r3
 800301e:	bfb8      	it	lt
 8003020:	4618      	movlt	r0, r3
 8003022:	e7a6      	b.n	8002f72 <_printf_i+0x166>
 8003024:	2301      	movs	r3, #1
 8003026:	4632      	mov	r2, r6
 8003028:	4649      	mov	r1, r9
 800302a:	4640      	mov	r0, r8
 800302c:	47d0      	blx	sl
 800302e:	3001      	adds	r0, #1
 8003030:	d09d      	beq.n	8002f6e <_printf_i+0x162>
 8003032:	3501      	adds	r5, #1
 8003034:	68e3      	ldr	r3, [r4, #12]
 8003036:	9903      	ldr	r1, [sp, #12]
 8003038:	1a5b      	subs	r3, r3, r1
 800303a:	42ab      	cmp	r3, r5
 800303c:	dcf2      	bgt.n	8003024 <_printf_i+0x218>
 800303e:	e7eb      	b.n	8003018 <_printf_i+0x20c>
 8003040:	2500      	movs	r5, #0
 8003042:	f104 0619 	add.w	r6, r4, #25
 8003046:	e7f5      	b.n	8003034 <_printf_i+0x228>
 8003048:	0800321b 	.word	0x0800321b
 800304c:	0800322c 	.word	0x0800322c

08003050 <memmove>:
 8003050:	4288      	cmp	r0, r1
 8003052:	b510      	push	{r4, lr}
 8003054:	eb01 0402 	add.w	r4, r1, r2
 8003058:	d902      	bls.n	8003060 <memmove+0x10>
 800305a:	4284      	cmp	r4, r0
 800305c:	4623      	mov	r3, r4
 800305e:	d807      	bhi.n	8003070 <memmove+0x20>
 8003060:	1e43      	subs	r3, r0, #1
 8003062:	42a1      	cmp	r1, r4
 8003064:	d008      	beq.n	8003078 <memmove+0x28>
 8003066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800306a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800306e:	e7f8      	b.n	8003062 <memmove+0x12>
 8003070:	4601      	mov	r1, r0
 8003072:	4402      	add	r2, r0
 8003074:	428a      	cmp	r2, r1
 8003076:	d100      	bne.n	800307a <memmove+0x2a>
 8003078:	bd10      	pop	{r4, pc}
 800307a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800307e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003082:	e7f7      	b.n	8003074 <memmove+0x24>

08003084 <_sbrk_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	2300      	movs	r3, #0
 8003088:	4d05      	ldr	r5, [pc, #20]	; (80030a0 <_sbrk_r+0x1c>)
 800308a:	4604      	mov	r4, r0
 800308c:	4608      	mov	r0, r1
 800308e:	602b      	str	r3, [r5, #0]
 8003090:	f7fd fad8 	bl	8000644 <_sbrk>
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	d102      	bne.n	800309e <_sbrk_r+0x1a>
 8003098:	682b      	ldr	r3, [r5, #0]
 800309a:	b103      	cbz	r3, 800309e <_sbrk_r+0x1a>
 800309c:	6023      	str	r3, [r4, #0]
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	200002a4 	.word	0x200002a4

080030a4 <memchr>:
 80030a4:	4603      	mov	r3, r0
 80030a6:	b510      	push	{r4, lr}
 80030a8:	b2c9      	uxtb	r1, r1
 80030aa:	4402      	add	r2, r0
 80030ac:	4293      	cmp	r3, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	d101      	bne.n	80030b6 <memchr+0x12>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e003      	b.n	80030be <memchr+0x1a>
 80030b6:	7804      	ldrb	r4, [r0, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	428c      	cmp	r4, r1
 80030bc:	d1f6      	bne.n	80030ac <memchr+0x8>
 80030be:	bd10      	pop	{r4, pc}

080030c0 <memcpy>:
 80030c0:	440a      	add	r2, r1
 80030c2:	4291      	cmp	r1, r2
 80030c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80030c8:	d100      	bne.n	80030cc <memcpy+0xc>
 80030ca:	4770      	bx	lr
 80030cc:	b510      	push	{r4, lr}
 80030ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030d2:	4291      	cmp	r1, r2
 80030d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030d8:	d1f9      	bne.n	80030ce <memcpy+0xe>
 80030da:	bd10      	pop	{r4, pc}

080030dc <_realloc_r>:
 80030dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e0:	4680      	mov	r8, r0
 80030e2:	4614      	mov	r4, r2
 80030e4:	460e      	mov	r6, r1
 80030e6:	b921      	cbnz	r1, 80030f2 <_realloc_r+0x16>
 80030e8:	4611      	mov	r1, r2
 80030ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030ee:	f7ff bc37 	b.w	8002960 <_malloc_r>
 80030f2:	b92a      	cbnz	r2, 8003100 <_realloc_r+0x24>
 80030f4:	f7ff fbcc 	bl	8002890 <_free_r>
 80030f8:	4625      	mov	r5, r4
 80030fa:	4628      	mov	r0, r5
 80030fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003100:	f000 f81b 	bl	800313a <_malloc_usable_size_r>
 8003104:	4284      	cmp	r4, r0
 8003106:	4607      	mov	r7, r0
 8003108:	d802      	bhi.n	8003110 <_realloc_r+0x34>
 800310a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800310e:	d812      	bhi.n	8003136 <_realloc_r+0x5a>
 8003110:	4621      	mov	r1, r4
 8003112:	4640      	mov	r0, r8
 8003114:	f7ff fc24 	bl	8002960 <_malloc_r>
 8003118:	4605      	mov	r5, r0
 800311a:	2800      	cmp	r0, #0
 800311c:	d0ed      	beq.n	80030fa <_realloc_r+0x1e>
 800311e:	42bc      	cmp	r4, r7
 8003120:	4622      	mov	r2, r4
 8003122:	4631      	mov	r1, r6
 8003124:	bf28      	it	cs
 8003126:	463a      	movcs	r2, r7
 8003128:	f7ff ffca 	bl	80030c0 <memcpy>
 800312c:	4631      	mov	r1, r6
 800312e:	4640      	mov	r0, r8
 8003130:	f7ff fbae 	bl	8002890 <_free_r>
 8003134:	e7e1      	b.n	80030fa <_realloc_r+0x1e>
 8003136:	4635      	mov	r5, r6
 8003138:	e7df      	b.n	80030fa <_realloc_r+0x1e>

0800313a <_malloc_usable_size_r>:
 800313a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800313e:	1f18      	subs	r0, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	bfbc      	itt	lt
 8003144:	580b      	ldrlt	r3, [r1, r0]
 8003146:	18c0      	addlt	r0, r0, r3
 8003148:	4770      	bx	lr
	...

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
