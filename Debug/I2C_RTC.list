
I2C_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003710  08003710  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003710  08003710  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003710  08003710  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000074  0800378c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800378c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009962  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017e7  00000000  00000000  00029a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000722  00000000  00000000  0002bb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001673e  00000000  00000000  0002c272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdd7  00000000  00000000  000429b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082969  00000000  00000000  0004e787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a68  00000000  00000000  000d10f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000d3b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800361c 	.word	0x0800361c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800361c 	.word	0x0800361c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b091      	sub	sp, #68	; 0x44
 8000160:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f000 fca7 	bl	8000ab4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 f899 	bl	800029c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 f935 	bl	80003d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800016e:	f000 f8db 	bl	8000328 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000172:	f000 f907 	bl	8000384 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart1,"in \n",strlen("in \n\r"),100);
 8000176:	2364      	movs	r3, #100	; 0x64
 8000178:	2205      	movs	r2, #5
 800017a:	493e      	ldr	r1, [pc, #248]	; (8000274 <main+0x118>)
 800017c:	483e      	ldr	r0, [pc, #248]	; (8000278 <main+0x11c>)
 800017e:	f002 fc1b 	bl	80029b8 <HAL_UART_Transmit>
		if(DS1307_INIT(&RTC1 ,&hi2c1)== DS1307_OK) {
 8000182:	493e      	ldr	r1, [pc, #248]	; (800027c <main+0x120>)
 8000184:	483e      	ldr	r0, [pc, #248]	; (8000280 <main+0x124>)
 8000186:	f000 fb19 	bl	80007bc <DS1307_INIT>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d109      	bne.n	80001a4 <main+0x48>
			HAL_UART_Transmit(&huart1,"ok its done \n\r",strlen("ok its done\n"),100);
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	220c      	movs	r2, #12
 8000194:	493b      	ldr	r1, [pc, #236]	; (8000284 <main+0x128>)
 8000196:	4838      	ldr	r0, [pc, #224]	; (8000278 <main+0x11c>)
 8000198:	f002 fc0e 	bl	80029b8 <HAL_UART_Transmit>
			DS1307_Set(&RTC1);
 800019c:	4838      	ldr	r0, [pc, #224]	; (8000280 <main+0x124>)
 800019e:	f000 fb4b 	bl	8000838 <DS1307_Set>
 80001a2:	e005      	b.n	80001b0 <main+0x54>
		} else{
			HAL_UART_Transmit(&huart1,"ok its not done \n\r",strlen("ok its not done\n"),100);
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	2210      	movs	r2, #16
 80001a8:	4937      	ldr	r1, [pc, #220]	; (8000288 <main+0x12c>)
 80001aa:	4833      	ldr	r0, [pc, #204]	; (8000278 <main+0x11c>)
 80001ac:	f002 fc04 	bl	80029b8 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if(DS1307_Read(&RTC1)== DS1307_OK ){
 80001b0:	4833      	ldr	r0, [pc, #204]	; (8000280 <main+0x124>)
 80001b2:	f000 fbce 	bl	8000952 <DS1307_Read>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d147      	bne.n	800024c <main+0xf0>
			uint8_t stat[15]="Clock: OK  ";
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <main+0x130>)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80001c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001cc:	2100      	movs	r1, #0
 80001ce:	460a      	mov	r2, r1
 80001d0:	801a      	strh	r2, [r3, #0]
 80001d2:	460a      	mov	r2, r1
 80001d4:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart1, stat, strlen(stat), 100);
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f7ff ffb6 	bl	800014c <strlen>
 80001e0:	4603      	mov	r3, r0
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	f107 0118 	add.w	r1, r7, #24
 80001e8:	2364      	movs	r3, #100	; 0x64
 80001ea:	4823      	ldr	r0, [pc, #140]	; (8000278 <main+0x11c>)
 80001ec:	f002 fbe4 	bl	80029b8 <HAL_UART_Transmit>
			sprintf(info, "%02d:%02d:%02d Day %02d %02d/%02d/%02d \n\r", RTC1.hour, RTC1.min, RTC1.sec, RTC1.day, RTC1.date, RTC1.month, RTC1.year);
 80001f0:	4b23      	ldr	r3, [pc, #140]	; (8000280 <main+0x124>)
 80001f2:	7a9b      	ldrb	r3, [r3, #10]
 80001f4:	461d      	mov	r5, r3
 80001f6:	4b22      	ldr	r3, [pc, #136]	; (8000280 <main+0x124>)
 80001f8:	7a5b      	ldrb	r3, [r3, #9]
 80001fa:	461e      	mov	r6, r3
 80001fc:	4b20      	ldr	r3, [pc, #128]	; (8000280 <main+0x124>)
 80001fe:	7a1b      	ldrb	r3, [r3, #8]
 8000200:	461a      	mov	r2, r3
 8000202:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <main+0x124>)
 8000204:	7adb      	ldrb	r3, [r3, #11]
 8000206:	4619      	mov	r1, r3
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <main+0x124>)
 800020a:	7b1b      	ldrb	r3, [r3, #12]
 800020c:	4618      	mov	r0, r3
 800020e:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <main+0x124>)
 8000210:	7b5b      	ldrb	r3, [r3, #13]
 8000212:	461c      	mov	r4, r3
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <main+0x124>)
 8000216:	89db      	ldrh	r3, [r3, #14]
 8000218:	9304      	str	r3, [sp, #16]
 800021a:	9403      	str	r4, [sp, #12]
 800021c:	9002      	str	r0, [sp, #8]
 800021e:	9101      	str	r1, [sp, #4]
 8000220:	9200      	str	r2, [sp, #0]
 8000222:	4633      	mov	r3, r6
 8000224:	462a      	mov	r2, r5
 8000226:	491a      	ldr	r1, [pc, #104]	; (8000290 <main+0x134>)
 8000228:	481a      	ldr	r0, [pc, #104]	; (8000294 <main+0x138>)
 800022a:	f002 fd45 	bl	8002cb8 <siprintf>
			HAL_UART_Transmit(&huart1, info, strlen(info), 100);
 800022e:	4819      	ldr	r0, [pc, #100]	; (8000294 <main+0x138>)
 8000230:	f7ff ff8c 	bl	800014c <strlen>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	2364      	movs	r3, #100	; 0x64
 800023a:	4916      	ldr	r1, [pc, #88]	; (8000294 <main+0x138>)
 800023c:	480e      	ldr	r0, [pc, #56]	; (8000278 <main+0x11c>)
 800023e:	f002 fbbb 	bl	80029b8 <HAL_UART_Transmit>
			HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 fc97 	bl	8000b78 <HAL_Delay>
 800024a:	e7b1      	b.n	80001b0 <main+0x54>
		} else{
			uint8_t error[] = "Clock: Error  \n\r";
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x13c>)
 800024e:	1d3c      	adds	r4, r7, #4
 8000250:	461d      	mov	r5, r3
 8000252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000256:	682b      	ldr	r3, [r5, #0]
 8000258:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, error, strlen(error), 100);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff75 	bl	800014c <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	1d39      	adds	r1, r7, #4
 8000268:	2364      	movs	r3, #100	; 0x64
 800026a:	4803      	ldr	r0, [pc, #12]	; (8000278 <main+0x11c>)
 800026c:	f002 fba4 	bl	80029b8 <HAL_UART_Transmit>
		if(DS1307_Read(&RTC1)== DS1307_OK ){
 8000270:	e79e      	b.n	80001b0 <main+0x54>
 8000272:	bf00      	nop
 8000274:	08003634 	.word	0x08003634
 8000278:	200000e4 	.word	0x200000e4
 800027c:	20000090 	.word	0x20000090
 8000280:	20000000 	.word	0x20000000
 8000284:	0800363c 	.word	0x0800363c
 8000288:	0800364c 	.word	0x0800364c
 800028c:	0800368c 	.word	0x0800368c
 8000290:	08003660 	.word	0x08003660
 8000294:	2000012c 	.word	0x2000012c
 8000298:	0800369c 	.word	0x0800369c

0800029c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	; 0x40
 80002a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fd24 	bl	8002cf8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002be:	2301      	movs	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 ff07 	bl	80020f8 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x58>
		Error_Handler();
 80002f0:	f000 f8a0 	bl	8000434 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f002 f974 	bl	80025fc <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x82>
		Error_Handler();
 800031a:	f000 f88b 	bl	8000434 <Error_Handler>
	}
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C1_Init+0x50>)
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <MX_I2C1_Init+0x54>)
 8000330:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_I2C1_Init+0x50>)
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_I2C1_Init+0x58>)
 8000336:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_I2C1_Init+0x50>)
 8000346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_I2C1_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_I2C1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C1_Init+0x50>)
 8000366:	f000 fe93 	bl	8001090 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000370:	f000 f860 	bl	8000434 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000090 	.word	0x20000090
 800037c:	40005400 	.word	0x40005400
 8000380:	000186a0 	.word	0x000186a0

08000384 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_USART1_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003bc:	f002 faac 	bl	8002918 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003c6:	f000 f835 	bl	8000434 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200000e4 	.word	0x200000e4
 80003d4:	40013800 	.word	0x40013800

080003d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_GPIO_Init+0x58>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <MX_GPIO_Init+0x58>)
 80003e4:	f043 0320 	orr.w	r3, r3, #32
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_GPIO_Init+0x58>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0320 	and.w	r3, r3, #32
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <MX_GPIO_Init+0x58>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_GPIO_Init+0x58>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0304 	and.w	r3, r3, #4
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_GPIO_Init+0x58>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a07      	ldr	r2, [pc, #28]	; (8000430 <MX_GPIO_Init+0x58>)
 8000414:	f043 0308 	orr.w	r3, r3, #8
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_GPIO_Init+0x58>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0308 	and.w	r3, r3, #8
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800043c:	e7fe      	b.n	800043c <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_MspInit+0x5c>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_MspInit+0x5c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <HAL_MspInit+0x5c>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x5c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_MspInit+0x60>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_MspInit+0x60>)
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000

080004a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <HAL_I2C_MspInit+0x70>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d123      	bne.n	800050c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_I2C_MspInit+0x74>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a13      	ldr	r2, [pc, #76]	; (8000518 <HAL_I2C_MspInit+0x74>)
 80004ca:	f043 0308 	orr.w	r3, r3, #8
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_I2C_MspInit+0x74>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0308 	and.w	r3, r3, #8
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004dc:	23c0      	movs	r3, #192	; 0xc0
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004e0:	2312      	movs	r3, #18
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	480b      	ldr	r0, [pc, #44]	; (800051c <HAL_I2C_MspInit+0x78>)
 80004f0:	f000 fc4a 	bl	8000d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_I2C_MspInit+0x74>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_I2C_MspInit+0x74>)
 80004fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <HAL_I2C_MspInit+0x74>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40005400 	.word	0x40005400
 8000518:	40021000 	.word	0x40021000
 800051c:	40010c00 	.word	0x40010c00

08000520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <HAL_UART_MspInit+0x8c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d131      	bne.n	80005a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_UART_MspInit+0x90>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <HAL_UART_MspInit+0x90>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_UART_MspInit+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_UART_MspInit+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <HAL_UART_MspInit+0x90>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_UART_MspInit+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000576:	2302      	movs	r3, #2
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <HAL_UART_MspInit+0x94>)
 8000586:	f000 fbff 	bl	8000d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800058a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <HAL_UART_MspInit+0x94>)
 80005a0:	f000 fbf2 	bl	8000d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40013800 	.word	0x40013800
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010800 	.word	0x40010800

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <NMI_Handler+0x4>

080005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler+0x4>

080005ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fe:	f000 fa9f 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f002 fb66 	bl	8002d08 <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20005000 	.word	0x20005000
 8000668:	00000400 	.word	0x00000400
 800066c:	20000160 	.word	0x20000160
 8000670:	200002b0 	.word	0x200002b0

08000674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff fff8 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000686:	490c      	ldr	r1, [pc, #48]	; (80006b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800069c:	4c09      	ldr	r4, [pc, #36]	; (80006c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f002 fb33 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fd55 	bl	800015c <main>
  bx lr
 80006b2:	4770      	bx	lr
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006bc:	08003718 	.word	0x08003718
  ldr r2, =_sbss
 80006c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006c4:	200002b0 	.word	0x200002b0

080006c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <ADC1_2_IRQHandler>

080006ca <I2c_write>:
 */
#include "ds1307.h"
#define dev_SLA       0b1101000
#define start_address 0x00

static uint8_t I2c_write(uint8_t *Data, uint8_t Len, ds1307_t *clock) { //address removed
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b088      	sub	sp, #32
 80006ce:	af02      	add	r7, sp, #8
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	460b      	mov	r3, r1
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef ok = HAL_I2C_Master_Transmit(clock->i2c_bus, dev_SLA << 1,
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6958      	ldr	r0, [r3, #20]
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	2264      	movs	r2, #100	; 0x64
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	21d0      	movs	r1, #208	; 0xd0
 80006e8:	f000 fe16 	bl	8001318 <HAL_I2C_Master_Transmit>
 80006ec:	4603      	mov	r3, r0
 80006ee:	75fb      	strb	r3, [r7, #23]
			Data, Len, 100); //sends write bit automatically
	return (ok == HAL_OK) ? 1 : 0;
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf0c      	ite	eq
 80006f6:	2301      	moveq	r3, #1
 80006f8:	2300      	movne	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
	//return __HAL_I2C_GET_FLAG(clock->i2c_bus, HAL_I2C_ERROR_AF) ? 0 : 1;

}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <I2c_read>:

static uint8_t I2c_read(uint8_t *Data, uint8_t Len, ds1307_t *clock) { //address removed
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	460b      	mov	r3, r1
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef ok = HAL_I2C_Master_Receive(clock->i2c_bus, dev_SLA << 1,
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6958      	ldr	r0, [r3, #20]
 8000716:	7afb      	ldrb	r3, [r7, #11]
 8000718:	b29b      	uxth	r3, r3
 800071a:	2264      	movs	r2, #100	; 0x64
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	21d0      	movs	r1, #208	; 0xd0
 8000722:	f000 fef7 	bl	8001514 <HAL_I2C_Master_Receive>
 8000726:	4603      	mov	r3, r0
 8000728:	75fb      	strb	r3, [r7, #23]
			Data, Len, 100);
	return (ok == HAL_OK) ? 1 : 0;
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
	//return __HAL_I2C_GET_FLAG(clock->i2c_bus, HAL_I2C_ERROR_AF) ? 0 : 1; // if ack fail it = true = return 0

}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <BCD_to_dec>:
static uint8_t BCD_to_dec(uint8_t num) {
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	71fb      	strb	r3, [r7, #7]

	return (num >> 4) * 10 + (0xf & num);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	091b      	lsrs	r3, r3, #4
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4413      	add	r3, r2
 8000762:	b2db      	uxtb	r3, r3

}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
	...

08000770 <dec_to_BCD>:
static uint8_t dec_to_BCD(uint8_t num) {
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t div = num / 10;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <dec_to_BCD+0x48>)
 800077e:	fba2 2303 	umull	r2, r3, r2, r3
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = num % 10;
 8000786:	79fa      	ldrb	r2, [r7, #7]
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <dec_to_BCD+0x48>)
 800078a:	fba3 1302 	umull	r1, r3, r3, r2
 800078e:	08d9      	lsrs	r1, r3, #3
 8000790:	460b      	mov	r3, r1
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	440b      	add	r3, r1
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	73bb      	strb	r3, [r7, #14]

	return div << 4 | rem;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	cccccccd 	.word	0xcccccccd

080007bc <DS1307_INIT>:

ds1307_stat_t DS1307_INIT(ds1307_t *clock, I2C_HandleTypeDef *i2c_bus) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	uint8_t stat = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
	clock->i2c_bus = i2c_bus;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	615a      	str	r2, [r3, #20]

	//enable oscillator

	clock->Buffer[0] = 0x00;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
	stat &= I2c_write(clock->Buffer, 1, clock);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	2101      	movs	r1, #1
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff74 	bl	80006ca <I2c_write>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4013      	ands	r3, r2
 80007ea:	73fb      	strb	r3, [r7, #15]
	stat &= I2c_read(clock->Buffer, 1, clock);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff86 	bl	8000704 <I2c_read>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	4013      	ands	r3, r2
 8000800:	73fb      	strb	r3, [r7, #15]
	if ((clock->Buffer[0]) & (1 << 7) == 0) {	// 1 1010101
												// 1 0000000
												// 1

	} else {
		clock->Buffer[0] = 0x00;  //reg base address
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		clock->Buffer[1] = 0;   //clock hold bit
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	705a      	strb	r2, [r3, #1]
		stat &= I2c_write(clock->Buffer, 2, clock);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff58 	bl	80006ca <I2c_write>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4013      	ands	r3, r2
 8000822:	73fb      	strb	r3, [r7, #15]
	}

	if (stat == 1) {
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d101      	bne.n	800082e <DS1307_INIT+0x72>
		return DS1307_OK;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <DS1307_INIT+0x74>
	} else {
		return DS1307_NOK;
 800082e:	2300      	movs	r3, #0
	}

}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <DS1307_Set>:
ds1307_stat_t DS1307_Set(ds1307_t *clock) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

	clock->Buffer[0] = start_address;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	clock->Buffer[1] = dec_to_BCD(clock->sec);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff90 	bl	8000770 <dec_to_BCD>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	705a      	strb	r2, [r3, #1]
	clock->Buffer[2] = dec_to_BCD(clock->min);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff87 	bl	8000770 <dec_to_BCD>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	709a      	strb	r2, [r3, #2]
	if (clock->format == 1) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7c5b      	ldrb	r3, [r3, #17]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01c      	beq.n	80008b2 <DS1307_Set+0x7a>
		clock->Buffer[3] = dec_to_BCD(clock->hour) | (clock->format << 6)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7a9b      	ldrb	r3, [r3, #10]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff77 	bl	8000770 <dec_to_BCD>
 8000882:	4603      	mov	r3, r0
 8000884:	b25a      	sxtb	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7c5b      	ldrb	r3, [r3, #17]
 800088a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b25b      	sxtb	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b25a      	sxtb	r2, r3
				| (clock->PM_AM << 5);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7c5b      	ldrb	r3, [r3, #17]
 800089c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	015b      	lsls	r3, r3, #5
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	b2da      	uxtb	r2, r3
		clock->Buffer[3] = dec_to_BCD(clock->hour) | (clock->format << 6)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	70da      	strb	r2, [r3, #3]
 80008b0:	e012      	b.n	80008d8 <DS1307_Set+0xa0>
	} else {
		clock->Buffer[3] = dec_to_BCD(clock->hour) | (clock->format << 6);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7a9b      	ldrb	r3, [r3, #10]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff5a 	bl	8000770 <dec_to_BCD>
 80008bc:	4603      	mov	r3, r0
 80008be:	b25a      	sxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7c5b      	ldrb	r3, [r3, #17]
 80008c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	70da      	strb	r2, [r3, #3]
	}
	//clock->Buffer[3] = dec_to_BCD(clock->hour) & 0x1f | (1 << 7); //5bits only
	clock->Buffer[4] = dec_to_BCD(clock->day) & 0x7;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7adb      	ldrb	r3, [r3, #11]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff47 	bl	8000770 <dec_to_BCD>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	711a      	strb	r2, [r3, #4]
	clock->Buffer[5] = dec_to_BCD(clock->date) & 0x3f;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7b1b      	ldrb	r3, [r3, #12]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff3c 	bl	8000770 <dec_to_BCD>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	715a      	strb	r2, [r3, #5]
	clock->Buffer[6] = dec_to_BCD(clock->month) & 0x1f;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b5b      	ldrb	r3, [r3, #13]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff31 	bl	8000770 <dec_to_BCD>
 800090e:	4603      	mov	r3, r0
 8000910:	f003 031f 	and.w	r3, r3, #31
 8000914:	b2da      	uxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	719a      	strb	r2, [r3, #6]
	clock->Buffer[7] = dec_to_BCD(clock->year - 2000);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	89db      	ldrh	r3, [r3, #14]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	3330      	adds	r3, #48	; 0x30
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff23 	bl	8000770 <dec_to_BCD>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	71da      	strb	r2, [r3, #7]

	if (I2c_write(clock->Buffer, 8, clock) == 1) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	2108      	movs	r1, #8
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fec6 	bl	80006ca <I2c_write>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d101      	bne.n	8000948 <DS1307_Set+0x110>
		return DS1307_OK;
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <DS1307_Set+0x112>
	} else {
		return DS1307_NOK;
 8000948:	2300      	movs	r3, #0
	}
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <DS1307_Read>:
ds1307_stat_t DS1307_Read(ds1307_t *clock) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	uint8_t stat = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
	clock->Buffer[0] = start_address;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	if (I2c_write(clock->Buffer, 1, clock) == 1) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fead 	bl	80006ca <I2c_write>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	f040 8098 	bne.w	8000aa8 <DS1307_Read+0x156>

		if (I2c_read(clock->Buffer, 7, clock) == 1) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	2107      	movs	r1, #7
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fec0 	bl	8000704 <I2c_read>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	f040 808c 	bne.w	8000aa4 <DS1307_Read+0x152>
			clock->sec = BCD_to_dec(clock->Buffer[0] & (0x7f));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fed1 	bl	800073e <BCD_to_dec>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	721a      	strb	r2, [r3, #8]
			clock->min = BCD_to_dec(clock->Buffer[1]);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	785b      	ldrb	r3, [r3, #1]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fec8 	bl	800073e <BCD_to_dec>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	725a      	strb	r2, [r3, #9]
			clock->format = (clock->Buffer[2] & 0b01000000) >> 6;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	119b      	asrs	r3, r3, #6
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b2d9      	uxtb	r1, r3
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	7c53      	ldrb	r3, [r2, #17]
 80009c6:	f361 0300 	bfi	r3, r1, #0, #1
 80009ca:	7453      	strb	r3, [r2, #17]
			if (clock->format == 1) {  //12 h form
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7c5b      	ldrb	r3, [r3, #17]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d017      	beq.n	8000a0a <DS1307_Read+0xb8>
				clock->hour = BCD_to_dec(clock->Buffer[2] & 0b00011111);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	f003 031f 	and.w	r3, r3, #31
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff feaa 	bl	800073e <BCD_to_dec>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	729a      	strb	r2, [r3, #10]
				clock->PM_AM = (clock->Buffer[2] & 0b00100000) >> 5;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	115b      	asrs	r3, r3, #5
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2d9      	uxtb	r1, r3
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	7c53      	ldrb	r3, [r2, #17]
 8000a02:	f361 0341 	bfi	r3, r1, #1, #1
 8000a06:	7453      	strb	r3, [r2, #17]
 8000a08:	e01a      	b.n	8000a40 <DS1307_Read+0xee>
			} else {
				clock->hour = BCD_to_dec(clock->Buffer[2] & 0b00111111);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	789b      	ldrb	r3, [r3, #2]
 8000a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe92 	bl	800073e <BCD_to_dec>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	729a      	strb	r2, [r3, #10]
				if (clock->hour > 11) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7a9b      	ldrb	r3, [r3, #10]
 8000a26:	2b0b      	cmp	r3, #11
 8000a28:	d905      	bls.n	8000a36 <DS1307_Read+0xe4>
					clock->PM_AM = 1;
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	7c53      	ldrb	r3, [r2, #17]
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	7453      	strb	r3, [r2, #17]
 8000a34:	e004      	b.n	8000a40 <DS1307_Read+0xee>
				} else {
					clock->PM_AM = 0;
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	7c53      	ldrb	r3, [r2, #17]
 8000a3a:	f36f 0341 	bfc	r3, #1, #1
 8000a3e:	7453      	strb	r3, [r2, #17]
				}
			}
			clock->day = BCD_to_dec(clock->Buffer[3] & 0x7);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	78db      	ldrb	r3, [r3, #3]
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe77 	bl	800073e <BCD_to_dec>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	72da      	strb	r2, [r3, #11]
			clock->date = BCD_to_dec(clock->Buffer[4] & 0x3f);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe6b 	bl	800073e <BCD_to_dec>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	731a      	strb	r2, [r3, #12]
			clock->month = BCD_to_dec(clock->Buffer[5] & 0x1f);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	795b      	ldrb	r3, [r3, #5]
 8000a74:	f003 031f 	and.w	r3, r3, #31
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe5f 	bl	800073e <BCD_to_dec>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	735a      	strb	r2, [r3, #13]
			clock->year = BCD_to_dec(clock->Buffer[6]) + 2000;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	799b      	ldrb	r3, [r3, #6]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fe56 	bl	800073e <BCD_to_dec>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	81da      	strh	r2, [r3, #14]
			return DS1307_OK;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e002      	b.n	8000aaa <DS1307_Read+0x158>
		} else {
			return DS1307_NOK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e000      	b.n	8000aaa <DS1307_Read+0x158>
		}

	} else {
		return DS1307_NOK;
 8000aa8:	2300      	movs	r3, #0
	}

}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f92b 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fcb6 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f935 	bl	8000d6e <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f90b 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000018 	.word	0x20000018
 8000b38:	20000020 	.word	0x20000020
 8000b3c:	2000001c 	.word	0x2000001c

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000020 	.word	0x20000020
 8000b60:	20000164 	.word	0x20000164

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000164 	.word	0x20000164

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000020 	.word	0x20000020

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff90 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff49 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff5e 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff90 	bl	8000c78 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5f 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ffb0 	bl	8000cdc <SysTick_Config>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e169      	b.n	8001070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8158 	bne.w	800106a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4a9a      	ldr	r2, [pc, #616]	; (8001028 <HAL_GPIO_Init+0x2a0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d05e      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000dc4:	4a98      	ldr	r2, [pc, #608]	; (8001028 <HAL_GPIO_Init+0x2a0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d875      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dca:	4a98      	ldr	r2, [pc, #608]	; (800102c <HAL_GPIO_Init+0x2a4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d058      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000dd0:	4a96      	ldr	r2, [pc, #600]	; (800102c <HAL_GPIO_Init+0x2a4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d86f      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dd6:	4a96      	ldr	r2, [pc, #600]	; (8001030 <HAL_GPIO_Init+0x2a8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d052      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000ddc:	4a94      	ldr	r2, [pc, #592]	; (8001030 <HAL_GPIO_Init+0x2a8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d869      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000de2:	4a94      	ldr	r2, [pc, #592]	; (8001034 <HAL_GPIO_Init+0x2ac>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d04c      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000de8:	4a92      	ldr	r2, [pc, #584]	; (8001034 <HAL_GPIO_Init+0x2ac>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d863      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dee:	4a92      	ldr	r2, [pc, #584]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d046      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
 8000df4:	4a90      	ldr	r2, [pc, #576]	; (8001038 <HAL_GPIO_Init+0x2b0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d85d      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d82a      	bhi.n	8000e54 <HAL_GPIO_Init+0xcc>
 8000dfe:	2b12      	cmp	r3, #18
 8000e00:	d859      	bhi.n	8000eb6 <HAL_GPIO_Init+0x12e>
 8000e02:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <HAL_GPIO_Init+0x80>)
 8000e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e08:	08000e83 	.word	0x08000e83
 8000e0c:	08000e5d 	.word	0x08000e5d
 8000e10:	08000e6f 	.word	0x08000e6f
 8000e14:	08000eb1 	.word	0x08000eb1
 8000e18:	08000eb7 	.word	0x08000eb7
 8000e1c:	08000eb7 	.word	0x08000eb7
 8000e20:	08000eb7 	.word	0x08000eb7
 8000e24:	08000eb7 	.word	0x08000eb7
 8000e28:	08000eb7 	.word	0x08000eb7
 8000e2c:	08000eb7 	.word	0x08000eb7
 8000e30:	08000eb7 	.word	0x08000eb7
 8000e34:	08000eb7 	.word	0x08000eb7
 8000e38:	08000eb7 	.word	0x08000eb7
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000eb7 	.word	0x08000eb7
 8000e44:	08000eb7 	.word	0x08000eb7
 8000e48:	08000eb7 	.word	0x08000eb7
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e79 	.word	0x08000e79
 8000e54:	4a79      	ldr	r2, [pc, #484]	; (800103c <HAL_GPIO_Init+0x2b4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e5a:	e02c      	b.n	8000eb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	623b      	str	r3, [r7, #32]
          break;
 8000e62:	e029      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e024      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	3308      	adds	r3, #8
 8000e74:	623b      	str	r3, [r7, #32]
          break;
 8000e76:	e01f      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	330c      	adds	r3, #12
 8000e7e:	623b      	str	r3, [r7, #32]
          break;
 8000e80:	e01a      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e013      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	611a      	str	r2, [r3, #16]
          break;
 8000ea2:	e009      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	615a      	str	r2, [r3, #20]
          break;
 8000eae:	e003      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x130>
          break;
 8000eb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	d801      	bhi.n	8000ec2 <HAL_GPIO_Init+0x13a>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	e001      	b.n	8000ec6 <HAL_GPIO_Init+0x13e>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2bff      	cmp	r3, #255	; 0xff
 8000ecc:	d802      	bhi.n	8000ed4 <HAL_GPIO_Init+0x14c>
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x152>
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3b08      	subs	r3, #8
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	401a      	ands	r2, r3
 8000eec:	6a39      	ldr	r1, [r7, #32]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80b1 	beq.w	800106a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f08:	4b4d      	ldr	r3, [pc, #308]	; (8001040 <HAL_GPIO_Init+0x2b8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x2b8>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f20:	4a48      	ldr	r2, [pc, #288]	; (8001044 <HAL_GPIO_Init+0x2bc>)
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a40      	ldr	r2, [pc, #256]	; (8001048 <HAL_GPIO_Init+0x2c0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d013      	beq.n	8000f74 <HAL_GPIO_Init+0x1ec>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <HAL_GPIO_Init+0x2c4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d00d      	beq.n	8000f70 <HAL_GPIO_Init+0x1e8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3e      	ldr	r2, [pc, #248]	; (8001050 <HAL_GPIO_Init+0x2c8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d007      	beq.n	8000f6c <HAL_GPIO_Init+0x1e4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a3d      	ldr	r2, [pc, #244]	; (8001054 <HAL_GPIO_Init+0x2cc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <HAL_GPIO_Init+0x1e0>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e006      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e004      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <HAL_GPIO_Init+0x1ee>
 8000f74:	2300      	movs	r3, #0
 8000f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f86:	492f      	ldr	r1, [pc, #188]	; (8001044 <HAL_GPIO_Init+0x2bc>)
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	492c      	ldr	r1, [pc, #176]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4928      	ldr	r1, [pc, #160]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	4922      	ldr	r1, [pc, #136]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60cb      	str	r3, [r1, #12]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	491e      	ldr	r1, [pc, #120]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4918      	ldr	r1, [pc, #96]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
 8000ffc:	e006      	b.n	800100c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	43db      	mvns	r3, r3
 8001006:	4914      	ldr	r1, [pc, #80]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 8001008:	4013      	ands	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d021      	beq.n	800105c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	490e      	ldr	r1, [pc, #56]	; (8001058 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e021      	b.n	800106a <HAL_GPIO_Init+0x2e2>
 8001026:	bf00      	nop
 8001028:	10320000 	.word	0x10320000
 800102c:	10310000 	.word	0x10310000
 8001030:	10220000 	.word	0x10220000
 8001034:	10210000 	.word	0x10210000
 8001038:	10120000 	.word	0x10120000
 800103c:	10110000 	.word	0x10110000
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40011000 	.word	0x40011000
 8001054:	40011400 	.word	0x40011400
 8001058:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_GPIO_Init+0x304>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	43db      	mvns	r3, r3
 8001064:	4909      	ldr	r1, [pc, #36]	; (800108c <HAL_GPIO_Init+0x304>)
 8001066:	4013      	ands	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	3301      	adds	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	fa22 f303 	lsr.w	r3, r2, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	f47f ae8e 	bne.w	8000d9c <HAL_GPIO_Init+0x14>
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	372c      	adds	r7, #44	; 0x2c
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e12b      	b.n	80012fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f9f4 	bl	80004a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	; 0x24
 80010c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010f4:	f001 fbca 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80010f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a81      	ldr	r2, [pc, #516]	; (8001304 <HAL_I2C_Init+0x274>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d807      	bhi.n	8001114 <HAL_I2C_Init+0x84>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a80      	ldr	r2, [pc, #512]	; (8001308 <HAL_I2C_Init+0x278>)
 8001108:	4293      	cmp	r3, r2
 800110a:	bf94      	ite	ls
 800110c:	2301      	movls	r3, #1
 800110e:	2300      	movhi	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e006      	b.n	8001122 <HAL_I2C_Init+0x92>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a7d      	ldr	r2, [pc, #500]	; (800130c <HAL_I2C_Init+0x27c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	bf94      	ite	ls
 800111c:	2301      	movls	r3, #1
 800111e:	2300      	movhi	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0e7      	b.n	80012fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a78      	ldr	r2, [pc, #480]	; (8001310 <HAL_I2C_Init+0x280>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9b      	lsrs	r3, r3, #18
 8001134:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	430a      	orrs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a6a      	ldr	r2, [pc, #424]	; (8001304 <HAL_I2C_Init+0x274>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d802      	bhi.n	8001164 <HAL_I2C_Init+0xd4>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3301      	adds	r3, #1
 8001162:	e009      	b.n	8001178 <HAL_I2C_Init+0xe8>
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a69      	ldr	r2, [pc, #420]	; (8001314 <HAL_I2C_Init+0x284>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	3301      	adds	r3, #1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	430b      	orrs	r3, r1
 800117e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800118a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	495c      	ldr	r1, [pc, #368]	; (8001304 <HAL_I2C_Init+0x274>)
 8001194:	428b      	cmp	r3, r1
 8001196:	d819      	bhi.n	80011cc <HAL_I2C_Init+0x13c>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1e59      	subs	r1, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a6:	1c59      	adds	r1, r3, #1
 80011a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011ac:	400b      	ands	r3, r1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00a      	beq.n	80011c8 <HAL_I2C_Init+0x138>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1e59      	subs	r1, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c0:	3301      	adds	r3, #1
 80011c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c6:	e051      	b.n	800126c <HAL_I2C_Init+0x1dc>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e04f      	b.n	800126c <HAL_I2C_Init+0x1dc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d111      	bne.n	80011f8 <HAL_I2C_Init+0x168>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1e58      	subs	r0, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	440b      	add	r3, r1
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	e012      	b.n	800121e <HAL_I2C_Init+0x18e>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1e58      	subs	r0, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6859      	ldr	r1, [r3, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	0099      	lsls	r1, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	fbb0 f3f3 	udiv	r3, r0, r3
 800120e:	3301      	adds	r3, #1
 8001210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_I2C_Init+0x196>
 8001222:	2301      	movs	r3, #1
 8001224:	e022      	b.n	800126c <HAL_I2C_Init+0x1dc>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10e      	bne.n	800124c <HAL_I2C_Init+0x1bc>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e58      	subs	r0, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6859      	ldr	r1, [r3, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	440b      	add	r3, r1
 800123c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001240:	3301      	adds	r3, #1
 8001242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124a:	e00f      	b.n	800126c <HAL_I2C_Init+0x1dc>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	0099      	lsls	r1, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	6809      	ldr	r1, [r1, #0]
 8001270:	4313      	orrs	r3, r2
 8001272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800129a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6911      	ldr	r1, [r2, #16]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68d2      	ldr	r2, [r2, #12]
 80012a6:	4311      	orrs	r1, r2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	000186a0 	.word	0x000186a0
 8001308:	001e847f 	.word	0x001e847f
 800130c:	003d08ff 	.word	0x003d08ff
 8001310:	431bde83 	.word	0x431bde83
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	817b      	strh	r3, [r7, #10]
 8001328:	4613      	mov	r3, r2
 800132a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff fc1a 	bl	8000b64 <HAL_GetTick>
 8001330:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b20      	cmp	r3, #32
 800133c:	f040 80e0 	bne.w	8001500 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2319      	movs	r3, #25
 8001346:	2201      	movs	r2, #1
 8001348:	4970      	ldr	r1, [pc, #448]	; (800150c <HAL_I2C_Master_Transmit+0x1f4>)
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 fc9e 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001356:	2302      	movs	r3, #2
 8001358:	e0d3      	b.n	8001502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_I2C_Master_Transmit+0x50>
 8001364:	2302      	movs	r3, #2
 8001366:	e0cc      	b.n	8001502 <HAL_I2C_Master_Transmit+0x1ea>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b01      	cmp	r3, #1
 800137c:	d007      	beq.n	800138e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800139c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2221      	movs	r2, #33	; 0x21
 80013a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2210      	movs	r2, #16
 80013aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	893a      	ldrh	r2, [r7, #8]
 80013be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a50      	ldr	r2, [pc, #320]	; (8001510 <HAL_I2C_Master_Transmit+0x1f8>)
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013d0:	8979      	ldrh	r1, [r7, #10]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	6a3a      	ldr	r2, [r7, #32]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fb08 	bl	80019ec <I2C_MasterRequestWrite>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08d      	b.n	8001502 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013fc:	e066      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	6a39      	ldr	r1, [r7, #32]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fd5c 	bl	8001ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00d      	beq.n	800142a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2b04      	cmp	r3, #4
 8001414:	d107      	bne.n	8001426 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06b      	b.n	8001502 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001452:	3b01      	subs	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b04      	cmp	r3, #4
 8001466:	d11b      	bne.n	80014a0 <HAL_I2C_Master_Transmit+0x188>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	d017      	beq.n	80014a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148a:	b29b      	uxth	r3, r3
 800148c:	3b01      	subs	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6a39      	ldr	r1, [r7, #32]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fd53 	bl	8001f50 <I2C_WaitOnBTFFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00d      	beq.n	80014cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d107      	bne.n	80014c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e01a      	b.n	8001502 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d194      	bne.n	80013fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001500:	2302      	movs	r3, #2
  }
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	00100002 	.word	0x00100002
 8001510:	ffff0000 	.word	0xffff0000

08001514 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	461a      	mov	r2, r3
 8001520:	460b      	mov	r3, r1
 8001522:	817b      	strh	r3, [r7, #10]
 8001524:	4613      	mov	r3, r2
 8001526:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff fb1a 	bl	8000b64 <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b20      	cmp	r3, #32
 800153c:	f040 824b 	bne.w	80019d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2319      	movs	r3, #25
 8001546:	2201      	movs	r2, #1
 8001548:	497f      	ldr	r1, [pc, #508]	; (8001748 <HAL_I2C_Master_Receive+0x234>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fb9e 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001556:	2302      	movs	r3, #2
 8001558:	e23e      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_I2C_Master_Receive+0x54>
 8001564:	2302      	movs	r3, #2
 8001566:	e237      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d007      	beq.n	800158e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2222      	movs	r2, #34	; 0x22
 80015a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2210      	movs	r2, #16
 80015aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	893a      	ldrh	r2, [r7, #8]
 80015be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a5f      	ldr	r2, [pc, #380]	; (800174c <HAL_I2C_Master_Receive+0x238>)
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015d0:	8979      	ldrh	r1, [r7, #10]
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fa8a 	bl	8001af0 <I2C_MasterRequestRead>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1f8      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d113      	bne.n	8001616 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e1cc      	b.n	80019b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	2b01      	cmp	r3, #1
 800161c:	d11e      	bne.n	800165c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800162c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800162e:	b672      	cpsid	i
}
 8001630:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i
}
 800165a:	e035      	b.n	80016c8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	2b02      	cmp	r3, #2
 8001662:	d11e      	bne.n	80016a2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001672:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800169e:	b662      	cpsie	i
}
 80016a0:	e012      	b.n	80016c8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80016c8:	e172      	b.n	80019b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	f200 811f 	bhi.w	8001912 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d123      	bne.n	8001724 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fc7d 	bl	8001fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e173      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001718:	b29b      	uxth	r3, r3
 800171a:	3b01      	subs	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001722:	e145      	b.n	80019b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b02      	cmp	r3, #2
 800172a:	d152      	bne.n	80017d2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	2200      	movs	r2, #0
 8001734:	4906      	ldr	r1, [pc, #24]	; (8001750 <HAL_I2C_Master_Receive+0x23c>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 faa8 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d008      	beq.n	8001754 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e148      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
 8001746:	bf00      	nop
 8001748:	00100002 	.word	0x00100002
 800174c:	ffff0000 	.word	0xffff0000
 8001750:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800179a:	b662      	cpsie	i
}
 800179c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017d0:	e0ee      	b.n	80019b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d8:	2200      	movs	r2, #0
 80017da:	4981      	ldr	r1, [pc, #516]	; (80019e0 <HAL_I2C_Master_Receive+0x4cc>)
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa55 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0f5      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001832:	4b6c      	ldr	r3, [pc, #432]	; (80019e4 <HAL_I2C_Master_Receive+0x4d0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	4a6b      	ldr	r2, [pc, #428]	; (80019e8 <HAL_I2C_Master_Receive+0x4d4>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0a1a      	lsrs	r2, r3, #8
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00da      	lsls	r2, r3, #3
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	3b01      	subs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d118      	bne.n	800188a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f043 0220 	orr.w	r2, r3, #32
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800187a:	b662      	cpsie	i
}
 800187c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0a6      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b04      	cmp	r3, #4
 8001896:	d1d9      	bne.n	800184c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018da:	b662      	cpsie	i
}
 80018dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001910:	e04e      	b.n	80019b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fb62 	bl	8001fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e058      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	3b01      	subs	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d124      	bne.n	80019b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800197c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f ae88 	bne.w	80016ca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	00010004 	.word	0x00010004
 80019e4:	20000018 	.word	0x20000018
 80019e8:	14f8b589 	.word	0x14f8b589

080019ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	460b      	mov	r3, r1
 80019fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d006      	beq.n	8001a16 <I2C_MasterRequestWrite+0x2a>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d003      	beq.n	8001a16 <I2C_MasterRequestWrite+0x2a>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a14:	d108      	bne.n	8001a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e00b      	b.n	8001a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	2b12      	cmp	r3, #18
 8001a2e:	d107      	bne.n	8001a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f91d 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a66:	d103      	bne.n	8001a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e035      	b.n	8001ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a7c:	d108      	bne.n	8001a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a7e:	897b      	ldrh	r3, [r7, #10]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	e01b      	b.n	8001ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	11db      	asrs	r3, r3, #7
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f003 0306 	and.w	r3, r3, #6
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f063 030f 	orn	r3, r3, #15
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <I2C_MasterRequestWrite+0xfc>)
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f966 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e010      	b.n	8001ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <I2C_MasterRequestWrite+0x100>)
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f956 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	00010008 	.word	0x00010008
 8001aec:	00010002 	.word	0x00010002

08001af0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d006      	beq.n	8001b2a <I2C_MasterRequestRead+0x3a>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d003      	beq.n	8001b2a <I2C_MasterRequestRead+0x3a>
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b28:	d108      	bne.n	8001b3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00b      	b.n	8001b54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	2b11      	cmp	r3, #17
 8001b42:	d107      	bne.n	8001b54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f893 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00d      	beq.n	8001b88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7a:	d103      	bne.n	8001b84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e079      	b.n	8001c7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b90:	d108      	bne.n	8001ba4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	e05f      	b.n	8001c64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ba4:	897b      	ldrh	r3, [r7, #10]
 8001ba6:	11db      	asrs	r3, r3, #7
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 0306 	and.w	r3, r3, #6
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f063 030f 	orn	r3, r3, #15
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4930      	ldr	r1, [pc, #192]	; (8001c84 <I2C_MasterRequestRead+0x194>)
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f8dc 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e054      	b.n	8001c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <I2C_MasterRequestRead+0x198>)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f8cc 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e044      	b.n	8001c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f831 	bl	8001c8c <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3e:	d103      	bne.n	8001c48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e017      	b.n	8001c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c4c:	897b      	ldrh	r3, [r7, #10]
 8001c4e:	11db      	asrs	r3, r3, #7
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f003 0306 	and.w	r3, r3, #6
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f063 030e 	orn	r3, r3, #14
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <I2C_MasterRequestRead+0x198>)
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f888 	bl	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	00010008 	.word	0x00010008
 8001c88:	00010002 	.word	0x00010002

08001c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c9c:	e048      	b.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d044      	beq.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7fe ff5d 	bl	8000b64 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d139      	bne.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10d      	bne.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	e00c      	b.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4013      	ands	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d116      	bne.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e023      	b.n	8001d78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d10d      	bne.n	8001d56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	43da      	mvns	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	4013      	ands	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	e00c      	b.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	4013      	ands	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d093      	beq.n	8001c9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d8e:	e071      	b.n	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9e:	d123      	bne.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f043 0204 	orr.w	r2, r3, #4
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e067      	b.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dee:	d041      	beq.n	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df0:	f7fe feb8 	bl	8000b64 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d302      	bcc.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d136      	bne.n	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10c      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf14      	ite	ne
 8001e22:	2301      	movne	r3, #1
 8001e24:	2300      	moveq	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	e00b      	b.n	8001e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e021      	b.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10c      	bne.n	8001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e00b      	b.n	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f af6d 	bne.w	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ecc:	e034      	b.n	8001f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8e3 	bl	800209a <I2C_IsAcknowledgeFailed>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e034      	b.n	8001f48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d028      	beq.n	8001f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7fe fe3d 	bl	8000b64 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11d      	bne.n	8001f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d016      	beq.n	8001f38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e007      	b.n	8001f48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d1c3      	bne.n	8001ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f5c:	e034      	b.n	8001fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f89b 	bl	800209a <I2C_IsAcknowledgeFailed>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e034      	b.n	8001fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d028      	beq.n	8001fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f76:	f7fe fdf5 	bl	8000b64 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d302      	bcc.n	8001f8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11d      	bne.n	8001fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d016      	beq.n	8001fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e007      	b.n	8001fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d1c3      	bne.n	8001f5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fec:	e049      	b.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d119      	bne.n	8002030 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0210 	mvn.w	r2, #16
 8002004:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e030      	b.n	8002092 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002030:	f7fe fd98 	bl	8000b64 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d302      	bcc.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11d      	bne.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	2b40      	cmp	r3, #64	; 0x40
 8002052:	d016      	beq.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e007      	b.n	8002092 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d1ae      	bne.n	8001fee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b0:	d11b      	bne.n	80020ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0204 	orr.w	r2, r3, #4
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e272      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	4b92      	ldr	r3, [pc, #584]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00c      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002124:	4b8f      	ldr	r3, [pc, #572]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
 8002130:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06c      	beq.n	8002224 <HAL_RCC_OscConfig+0x12c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d168      	bne.n	8002224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e24c      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x76>
 8002160:	4b80      	ldr	r3, [pc, #512]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a7f      	ldr	r2, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a77      	ldr	r2, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0xbc>
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a71      	ldr	r2, [pc, #452]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 80021b4:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a67      	ldr	r2, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe fcc6 	bl	8000b64 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fcc2 	bl	8000b64 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e200      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xe4>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fcb2 	bl	8000b64 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe fcae 	bl	8000b64 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1ec      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x10c>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1c0      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4939      	ldr	r1, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe fc67 	bl	8000b64 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7fe fc63 	bl	8000b64 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1a1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fc46 	bl	8000b64 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7fe fc42 	bl	8000b64 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e180      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03a      	beq.n	800237c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7fe fc26 	bl	8000b64 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe fc22 	bl	8000b64 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e160      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 face 	bl	80028dc <RCC_Delay>
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fc0c 	bl	8000b64 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fc08 	bl	8000b64 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d908      	bls.n	8002370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e146      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	42420000 	.word	0x42420000
 800236c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e9      	bne.n	8002350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a6 	beq.w	80024d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b85      	ldr	r3, [pc, #532]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fbc9 	bl	8000b64 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7fe fbc5 	bl	8000b64 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	; 0x64
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e103      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x312>
 80023fc:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e02d      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x334>
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x356>
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a5d      	ldr	r2, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b58      	ldr	r3, [pc, #352]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a57      	ldr	r2, [pc, #348]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fb79 	bl	8000b64 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fb75 	bl	8000b64 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0b1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x37e>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe fb63 	bl	8000b64 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fb5f 	bl	8000b64 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e09b      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d061      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d146      	bne.n	8002582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe fb33 	bl	8000b64 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fb2f 	bl	8000b64 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e06d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4921      	ldr	r1, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a19      	ldr	r1, [r3, #32]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	430b      	orrs	r3, r1
 800254e:	491b      	ldr	r1, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fb03 	bl	8000b64 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe faff 	bl	8000b64 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e03d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x46a>
 8002580:	e035      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe faec 	bl	8000b64 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fae8 	bl	8000b64 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e026      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x498>
 80025ae:	e01e      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e019      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x500>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0d0      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4965      	ldr	r1, [pc, #404]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d040      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e073      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4936      	ldr	r1, [pc, #216]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fa3a 	bl	8000b64 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fa36 	bl	8000b64 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e053      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d210      	bcs.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4922      	ldr	r1, [pc, #136]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	; (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1cc>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1d0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe f998 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	080036b0 	.word	0x080036b0
 80027c8:	20000018 	.word	0x20000018
 80027cc:	2000001c 	.word	0x2000001c

080027d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x30>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x36>
 80027fe:	e027      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	613b      	str	r3, [r7, #16]
      break;
 8002804:	e027      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0c5b      	lsrs	r3, r3, #17
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	fb03 f202 	mul.w	r2, r3, r2
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e004      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	613b      	str	r3, [r7, #16]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	693b      	ldr	r3, [r7, #16]
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	007a1200 	.word	0x007a1200
 800286c:	080036c8 	.word	0x080036c8
 8002870:	080036d8 	.word	0x080036d8
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_RCC_GetHCLKFreq+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000018 	.word	0x20000018

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff2 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	080036c0 	.word	0x080036c0

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffde 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	080036c0 	.word	0x080036c0

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000018 	.word	0x20000018
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e042      	b.n	80029b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd fdee 	bl	8000520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f91d 	bl	8002b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d16d      	bne.n	8002ab4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_UART_Transmit+0x2c>
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e066      	b.n	8002ab6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2221      	movs	r2, #33	; 0x21
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f6:	f7fe f8b5 	bl	8000b64 <HAL_GetTick>
 80029fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d108      	bne.n	8002a24 <HAL_UART_Transmit+0x6c>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	e003      	b.n	8002a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a2c:	e02a      	b.n	8002a84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f840 	bl	8002abe <UART_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e036      	b.n	8002ab6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10b      	bne.n	8002a66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3302      	adds	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	e007      	b.n	8002a76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1cf      	bne.n	8002a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f810 	bl	8002abe <UART_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e006      	b.n	8002ab6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b090      	sub	sp, #64	; 0x40
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ace:	e050      	b.n	8002b72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d04c      	beq.n	8002b72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0x30>
 8002ade:	f7fe f841 	bl	8000b64 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d241      	bcs.n	8002b72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b0e:	637a      	str	r2, [r7, #52]	; 0x34
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e5      	bne.n	8002aee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3314      	adds	r3, #20
 8002b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	613b      	str	r3, [r7, #16]
   return(result);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b42:	623a      	str	r2, [r7, #32]
 8002b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	69f9      	ldr	r1, [r7, #28]
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e5      	bne.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d09f      	beq.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3740      	adds	r7, #64	; 0x40
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bd6:	f023 030c 	bic.w	r3, r3, #12
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <UART_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c04:	f7ff fe56 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	e002      	b.n	8002c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f7ff fe3e 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	0119      	lsls	r1, r3, #4
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2064      	movs	r0, #100	; 0x64
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c68:	4419      	add	r1, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c82:	fba3 0302 	umull	r0, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2064      	movs	r0, #100	; 0x64
 8002c8a:	fb00 f303 	mul.w	r3, r0, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	3332      	adds	r3, #50	; 0x32
 8002c94:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <UART_SetConfig+0x118>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	51eb851f 	.word	0x51eb851f

08002cb8 <siprintf>:
 8002cb8:	b40e      	push	{r1, r2, r3}
 8002cba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cbe:	b500      	push	{lr}
 8002cc0:	b09c      	sub	sp, #112	; 0x70
 8002cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8002cc4:	9002      	str	r0, [sp, #8]
 8002cc6:	9006      	str	r0, [sp, #24]
 8002cc8:	9107      	str	r1, [sp, #28]
 8002cca:	9104      	str	r1, [sp, #16]
 8002ccc:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <siprintf+0x38>)
 8002cce:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <siprintf+0x3c>)
 8002cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd4:	9105      	str	r1, [sp, #20]
 8002cd6:	6800      	ldr	r0, [r0, #0]
 8002cd8:	a902      	add	r1, sp, #8
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	f000 f98e 	bl	8002ffc <_svfiprintf_r>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	9b02      	ldr	r3, [sp, #8]
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	b01c      	add	sp, #112	; 0x70
 8002ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cec:	b003      	add	sp, #12
 8002cee:	4770      	bx	lr
 8002cf0:	20000070 	.word	0x20000070
 8002cf4:	ffff0208 	.word	0xffff0208

08002cf8 <memset>:
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <memset+0xa>
 8002d00:	4770      	bx	lr
 8002d02:	f803 1b01 	strb.w	r1, [r3], #1
 8002d06:	e7f9      	b.n	8002cfc <memset+0x4>

08002d08 <__errno>:
 8002d08:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <__errno+0x8>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000070 	.word	0x20000070

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2600      	movs	r6, #0
 8002d18:	4d0c      	ldr	r5, [pc, #48]	; (8002d4c <__libc_init_array+0x38>)
 8002d1a:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1c:	1b64      	subs	r4, r4, r5
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	f000 fc7a 	bl	800361c <_init>
 8002d28:	2600      	movs	r6, #0
 8002d2a:	4d0a      	ldr	r5, [pc, #40]	; (8002d54 <__libc_init_array+0x40>)
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <__libc_init_array+0x44>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08003710 	.word	0x08003710
 8002d50:	08003710 	.word	0x08003710
 8002d54:	08003710 	.word	0x08003710
 8002d58:	08003714 	.word	0x08003714

08002d5c <__retarget_lock_acquire_recursive>:
 8002d5c:	4770      	bx	lr

08002d5e <__retarget_lock_release_recursive>:
 8002d5e:	4770      	bx	lr

08002d60 <_free_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4605      	mov	r5, r0
 8002d64:	2900      	cmp	r1, #0
 8002d66:	d040      	beq.n	8002dea <_free_r+0x8a>
 8002d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6c:	1f0c      	subs	r4, r1, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bfb8      	it	lt
 8002d72:	18e4      	addlt	r4, r4, r3
 8002d74:	f000 f8dc 	bl	8002f30 <__malloc_lock>
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <_free_r+0x8c>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	b933      	cbnz	r3, 8002d8c <_free_r+0x2c>
 8002d7e:	6063      	str	r3, [r4, #4]
 8002d80:	6014      	str	r4, [r2, #0]
 8002d82:	4628      	mov	r0, r5
 8002d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d88:	f000 b8d8 	b.w	8002f3c <__malloc_unlock>
 8002d8c:	42a3      	cmp	r3, r4
 8002d8e:	d908      	bls.n	8002da2 <_free_r+0x42>
 8002d90:	6820      	ldr	r0, [r4, #0]
 8002d92:	1821      	adds	r1, r4, r0
 8002d94:	428b      	cmp	r3, r1
 8002d96:	bf01      	itttt	eq
 8002d98:	6819      	ldreq	r1, [r3, #0]
 8002d9a:	685b      	ldreq	r3, [r3, #4]
 8002d9c:	1809      	addeq	r1, r1, r0
 8002d9e:	6021      	streq	r1, [r4, #0]
 8002da0:	e7ed      	b.n	8002d7e <_free_r+0x1e>
 8002da2:	461a      	mov	r2, r3
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b10b      	cbz	r3, 8002dac <_free_r+0x4c>
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	d9fa      	bls.n	8002da2 <_free_r+0x42>
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	1850      	adds	r0, r2, r1
 8002db0:	42a0      	cmp	r0, r4
 8002db2:	d10b      	bne.n	8002dcc <_free_r+0x6c>
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	4401      	add	r1, r0
 8002db8:	1850      	adds	r0, r2, r1
 8002dba:	4283      	cmp	r3, r0
 8002dbc:	6011      	str	r1, [r2, #0]
 8002dbe:	d1e0      	bne.n	8002d82 <_free_r+0x22>
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4408      	add	r0, r1
 8002dc6:	6010      	str	r0, [r2, #0]
 8002dc8:	6053      	str	r3, [r2, #4]
 8002dca:	e7da      	b.n	8002d82 <_free_r+0x22>
 8002dcc:	d902      	bls.n	8002dd4 <_free_r+0x74>
 8002dce:	230c      	movs	r3, #12
 8002dd0:	602b      	str	r3, [r5, #0]
 8002dd2:	e7d6      	b.n	8002d82 <_free_r+0x22>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	1821      	adds	r1, r4, r0
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	bf01      	itttt	eq
 8002ddc:	6819      	ldreq	r1, [r3, #0]
 8002dde:	685b      	ldreq	r3, [r3, #4]
 8002de0:	1809      	addeq	r1, r1, r0
 8002de2:	6021      	streq	r1, [r4, #0]
 8002de4:	6063      	str	r3, [r4, #4]
 8002de6:	6054      	str	r4, [r2, #4]
 8002de8:	e7cb      	b.n	8002d82 <_free_r+0x22>
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	200002a8 	.word	0x200002a8

08002df0 <sbrk_aligned>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4e0e      	ldr	r6, [pc, #56]	; (8002e2c <sbrk_aligned+0x3c>)
 8002df4:	460c      	mov	r4, r1
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	4605      	mov	r5, r0
 8002dfa:	b911      	cbnz	r1, 8002e02 <sbrk_aligned+0x12>
 8002dfc:	f000 fbaa 	bl	8003554 <_sbrk_r>
 8002e00:	6030      	str	r0, [r6, #0]
 8002e02:	4621      	mov	r1, r4
 8002e04:	4628      	mov	r0, r5
 8002e06:	f000 fba5 	bl	8003554 <_sbrk_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	d00a      	beq.n	8002e24 <sbrk_aligned+0x34>
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d007      	beq.n	8002e28 <sbrk_aligned+0x38>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 fb9a 	bl	8003554 <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d101      	bne.n	8002e28 <sbrk_aligned+0x38>
 8002e24:	f04f 34ff 	mov.w	r4, #4294967295
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	200002ac 	.word	0x200002ac

08002e30 <_malloc_r>:
 8002e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e34:	1ccd      	adds	r5, r1, #3
 8002e36:	f025 0503 	bic.w	r5, r5, #3
 8002e3a:	3508      	adds	r5, #8
 8002e3c:	2d0c      	cmp	r5, #12
 8002e3e:	bf38      	it	cc
 8002e40:	250c      	movcc	r5, #12
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	4607      	mov	r7, r0
 8002e46:	db01      	blt.n	8002e4c <_malloc_r+0x1c>
 8002e48:	42a9      	cmp	r1, r5
 8002e4a:	d905      	bls.n	8002e58 <_malloc_r+0x28>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	2600      	movs	r6, #0
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4630      	mov	r0, r6
 8002e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f2c <_malloc_r+0xfc>
 8002e5c:	f000 f868 	bl	8002f30 <__malloc_lock>
 8002e60:	f8d8 3000 	ldr.w	r3, [r8]
 8002e64:	461c      	mov	r4, r3
 8002e66:	bb5c      	cbnz	r4, 8002ec0 <_malloc_r+0x90>
 8002e68:	4629      	mov	r1, r5
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	f7ff ffc0 	bl	8002df0 <sbrk_aligned>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	4604      	mov	r4, r0
 8002e74:	d155      	bne.n	8002f22 <_malloc_r+0xf2>
 8002e76:	f8d8 4000 	ldr.w	r4, [r8]
 8002e7a:	4626      	mov	r6, r4
 8002e7c:	2e00      	cmp	r6, #0
 8002e7e:	d145      	bne.n	8002f0c <_malloc_r+0xdc>
 8002e80:	2c00      	cmp	r4, #0
 8002e82:	d048      	beq.n	8002f16 <_malloc_r+0xe6>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	4631      	mov	r1, r6
 8002e88:	4638      	mov	r0, r7
 8002e8a:	eb04 0903 	add.w	r9, r4, r3
 8002e8e:	f000 fb61 	bl	8003554 <_sbrk_r>
 8002e92:	4581      	cmp	r9, r0
 8002e94:	d13f      	bne.n	8002f16 <_malloc_r+0xe6>
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	4638      	mov	r0, r7
 8002e9a:	1a6d      	subs	r5, r5, r1
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	f7ff ffa7 	bl	8002df0 <sbrk_aligned>
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d037      	beq.n	8002f16 <_malloc_r+0xe6>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	442b      	add	r3, r5
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d038      	beq.n	8002f26 <_malloc_r+0xf6>
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	42a2      	cmp	r2, r4
 8002eb8:	d12b      	bne.n	8002f12 <_malloc_r+0xe2>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e00f      	b.n	8002ee0 <_malloc_r+0xb0>
 8002ec0:	6822      	ldr	r2, [r4, #0]
 8002ec2:	1b52      	subs	r2, r2, r5
 8002ec4:	d41f      	bmi.n	8002f06 <_malloc_r+0xd6>
 8002ec6:	2a0b      	cmp	r2, #11
 8002ec8:	d917      	bls.n	8002efa <_malloc_r+0xca>
 8002eca:	1961      	adds	r1, r4, r5
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	6025      	str	r5, [r4, #0]
 8002ed0:	bf18      	it	ne
 8002ed2:	6059      	strne	r1, [r3, #4]
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	bf08      	it	eq
 8002ed8:	f8c8 1000 	streq.w	r1, [r8]
 8002edc:	5162      	str	r2, [r4, r5]
 8002ede:	604b      	str	r3, [r1, #4]
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	f104 060b 	add.w	r6, r4, #11
 8002ee6:	f000 f829 	bl	8002f3c <__malloc_unlock>
 8002eea:	f026 0607 	bic.w	r6, r6, #7
 8002eee:	1d23      	adds	r3, r4, #4
 8002ef0:	1af2      	subs	r2, r6, r3
 8002ef2:	d0ae      	beq.n	8002e52 <_malloc_r+0x22>
 8002ef4:	1b9b      	subs	r3, r3, r6
 8002ef6:	50a3      	str	r3, [r4, r2]
 8002ef8:	e7ab      	b.n	8002e52 <_malloc_r+0x22>
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	6862      	ldr	r2, [r4, #4]
 8002efe:	d1dd      	bne.n	8002ebc <_malloc_r+0x8c>
 8002f00:	f8c8 2000 	str.w	r2, [r8]
 8002f04:	e7ec      	b.n	8002ee0 <_malloc_r+0xb0>
 8002f06:	4623      	mov	r3, r4
 8002f08:	6864      	ldr	r4, [r4, #4]
 8002f0a:	e7ac      	b.n	8002e66 <_malloc_r+0x36>
 8002f0c:	4634      	mov	r4, r6
 8002f0e:	6876      	ldr	r6, [r6, #4]
 8002f10:	e7b4      	b.n	8002e7c <_malloc_r+0x4c>
 8002f12:	4613      	mov	r3, r2
 8002f14:	e7cc      	b.n	8002eb0 <_malloc_r+0x80>
 8002f16:	230c      	movs	r3, #12
 8002f18:	4638      	mov	r0, r7
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	f000 f80e 	bl	8002f3c <__malloc_unlock>
 8002f20:	e797      	b.n	8002e52 <_malloc_r+0x22>
 8002f22:	6025      	str	r5, [r4, #0]
 8002f24:	e7dc      	b.n	8002ee0 <_malloc_r+0xb0>
 8002f26:	605b      	str	r3, [r3, #4]
 8002f28:	deff      	udf	#255	; 0xff
 8002f2a:	bf00      	nop
 8002f2c:	200002a8 	.word	0x200002a8

08002f30 <__malloc_lock>:
 8002f30:	4801      	ldr	r0, [pc, #4]	; (8002f38 <__malloc_lock+0x8>)
 8002f32:	f7ff bf13 	b.w	8002d5c <__retarget_lock_acquire_recursive>
 8002f36:	bf00      	nop
 8002f38:	200002a4 	.word	0x200002a4

08002f3c <__malloc_unlock>:
 8002f3c:	4801      	ldr	r0, [pc, #4]	; (8002f44 <__malloc_unlock+0x8>)
 8002f3e:	f7ff bf0e 	b.w	8002d5e <__retarget_lock_release_recursive>
 8002f42:	bf00      	nop
 8002f44:	200002a4 	.word	0x200002a4

08002f48 <__ssputs_r>:
 8002f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f4c:	461f      	mov	r7, r3
 8002f4e:	688e      	ldr	r6, [r1, #8]
 8002f50:	4682      	mov	sl, r0
 8002f52:	42be      	cmp	r6, r7
 8002f54:	460c      	mov	r4, r1
 8002f56:	4690      	mov	r8, r2
 8002f58:	680b      	ldr	r3, [r1, #0]
 8002f5a:	d82c      	bhi.n	8002fb6 <__ssputs_r+0x6e>
 8002f5c:	898a      	ldrh	r2, [r1, #12]
 8002f5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f62:	d026      	beq.n	8002fb2 <__ssputs_r+0x6a>
 8002f64:	6965      	ldr	r5, [r4, #20]
 8002f66:	6909      	ldr	r1, [r1, #16]
 8002f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f6c:	eba3 0901 	sub.w	r9, r3, r1
 8002f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f74:	1c7b      	adds	r3, r7, #1
 8002f76:	444b      	add	r3, r9
 8002f78:	106d      	asrs	r5, r5, #1
 8002f7a:	429d      	cmp	r5, r3
 8002f7c:	bf38      	it	cc
 8002f7e:	461d      	movcc	r5, r3
 8002f80:	0553      	lsls	r3, r2, #21
 8002f82:	d527      	bpl.n	8002fd4 <__ssputs_r+0x8c>
 8002f84:	4629      	mov	r1, r5
 8002f86:	f7ff ff53 	bl	8002e30 <_malloc_r>
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	b360      	cbz	r0, 8002fe8 <__ssputs_r+0xa0>
 8002f8e:	464a      	mov	r2, r9
 8002f90:	6921      	ldr	r1, [r4, #16]
 8002f92:	f000 fafd 	bl	8003590 <memcpy>
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	6126      	str	r6, [r4, #16]
 8002fa4:	444e      	add	r6, r9
 8002fa6:	6026      	str	r6, [r4, #0]
 8002fa8:	463e      	mov	r6, r7
 8002faa:	6165      	str	r5, [r4, #20]
 8002fac:	eba5 0509 	sub.w	r5, r5, r9
 8002fb0:	60a5      	str	r5, [r4, #8]
 8002fb2:	42be      	cmp	r6, r7
 8002fb4:	d900      	bls.n	8002fb8 <__ssputs_r+0x70>
 8002fb6:	463e      	mov	r6, r7
 8002fb8:	4632      	mov	r2, r6
 8002fba:	4641      	mov	r1, r8
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	f000 faaf 	bl	8003520 <memmove>
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	68a3      	ldr	r3, [r4, #8]
 8002fc6:	1b9b      	subs	r3, r3, r6
 8002fc8:	60a3      	str	r3, [r4, #8]
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	4433      	add	r3, r6
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd4:	462a      	mov	r2, r5
 8002fd6:	f000 fae9 	bl	80035ac <_realloc_r>
 8002fda:	4606      	mov	r6, r0
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1e0      	bne.n	8002fa2 <__ssputs_r+0x5a>
 8002fe0:	4650      	mov	r0, sl
 8002fe2:	6921      	ldr	r1, [r4, #16]
 8002fe4:	f7ff febc 	bl	8002d60 <_free_r>
 8002fe8:	230c      	movs	r3, #12
 8002fea:	f8ca 3000 	str.w	r3, [sl]
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff8:	81a3      	strh	r3, [r4, #12]
 8002ffa:	e7e9      	b.n	8002fd0 <__ssputs_r+0x88>

08002ffc <_svfiprintf_r>:
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	4698      	mov	r8, r3
 8003002:	898b      	ldrh	r3, [r1, #12]
 8003004:	4607      	mov	r7, r0
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	460d      	mov	r5, r1
 800300a:	4614      	mov	r4, r2
 800300c:	b09d      	sub	sp, #116	; 0x74
 800300e:	d50e      	bpl.n	800302e <_svfiprintf_r+0x32>
 8003010:	690b      	ldr	r3, [r1, #16]
 8003012:	b963      	cbnz	r3, 800302e <_svfiprintf_r+0x32>
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	f7ff ff0b 	bl	8002e30 <_malloc_r>
 800301a:	6028      	str	r0, [r5, #0]
 800301c:	6128      	str	r0, [r5, #16]
 800301e:	b920      	cbnz	r0, 800302a <_svfiprintf_r+0x2e>
 8003020:	230c      	movs	r3, #12
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	e0d0      	b.n	80031cc <_svfiprintf_r+0x1d0>
 800302a:	2340      	movs	r3, #64	; 0x40
 800302c:	616b      	str	r3, [r5, #20]
 800302e:	2300      	movs	r3, #0
 8003030:	9309      	str	r3, [sp, #36]	; 0x24
 8003032:	2320      	movs	r3, #32
 8003034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003038:	2330      	movs	r3, #48	; 0x30
 800303a:	f04f 0901 	mov.w	r9, #1
 800303e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003042:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80031e4 <_svfiprintf_r+0x1e8>
 8003046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800304a:	4623      	mov	r3, r4
 800304c:	469a      	mov	sl, r3
 800304e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003052:	b10a      	cbz	r2, 8003058 <_svfiprintf_r+0x5c>
 8003054:	2a25      	cmp	r2, #37	; 0x25
 8003056:	d1f9      	bne.n	800304c <_svfiprintf_r+0x50>
 8003058:	ebba 0b04 	subs.w	fp, sl, r4
 800305c:	d00b      	beq.n	8003076 <_svfiprintf_r+0x7a>
 800305e:	465b      	mov	r3, fp
 8003060:	4622      	mov	r2, r4
 8003062:	4629      	mov	r1, r5
 8003064:	4638      	mov	r0, r7
 8003066:	f7ff ff6f 	bl	8002f48 <__ssputs_r>
 800306a:	3001      	adds	r0, #1
 800306c:	f000 80a9 	beq.w	80031c2 <_svfiprintf_r+0x1c6>
 8003070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003072:	445a      	add	r2, fp
 8003074:	9209      	str	r2, [sp, #36]	; 0x24
 8003076:	f89a 3000 	ldrb.w	r3, [sl]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80a1 	beq.w	80031c2 <_svfiprintf_r+0x1c6>
 8003080:	2300      	movs	r3, #0
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800308a:	f10a 0a01 	add.w	sl, sl, #1
 800308e:	9304      	str	r3, [sp, #16]
 8003090:	9307      	str	r3, [sp, #28]
 8003092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003096:	931a      	str	r3, [sp, #104]	; 0x68
 8003098:	4654      	mov	r4, sl
 800309a:	2205      	movs	r2, #5
 800309c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030a0:	4850      	ldr	r0, [pc, #320]	; (80031e4 <_svfiprintf_r+0x1e8>)
 80030a2:	f000 fa67 	bl	8003574 <memchr>
 80030a6:	9a04      	ldr	r2, [sp, #16]
 80030a8:	b9d8      	cbnz	r0, 80030e2 <_svfiprintf_r+0xe6>
 80030aa:	06d0      	lsls	r0, r2, #27
 80030ac:	bf44      	itt	mi
 80030ae:	2320      	movmi	r3, #32
 80030b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030b4:	0711      	lsls	r1, r2, #28
 80030b6:	bf44      	itt	mi
 80030b8:	232b      	movmi	r3, #43	; 0x2b
 80030ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030be:	f89a 3000 	ldrb.w	r3, [sl]
 80030c2:	2b2a      	cmp	r3, #42	; 0x2a
 80030c4:	d015      	beq.n	80030f2 <_svfiprintf_r+0xf6>
 80030c6:	4654      	mov	r4, sl
 80030c8:	2000      	movs	r0, #0
 80030ca:	f04f 0c0a 	mov.w	ip, #10
 80030ce:	9a07      	ldr	r2, [sp, #28]
 80030d0:	4621      	mov	r1, r4
 80030d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030d6:	3b30      	subs	r3, #48	; 0x30
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d94d      	bls.n	8003178 <_svfiprintf_r+0x17c>
 80030dc:	b1b0      	cbz	r0, 800310c <_svfiprintf_r+0x110>
 80030de:	9207      	str	r2, [sp, #28]
 80030e0:	e014      	b.n	800310c <_svfiprintf_r+0x110>
 80030e2:	eba0 0308 	sub.w	r3, r0, r8
 80030e6:	fa09 f303 	lsl.w	r3, r9, r3
 80030ea:	4313      	orrs	r3, r2
 80030ec:	46a2      	mov	sl, r4
 80030ee:	9304      	str	r3, [sp, #16]
 80030f0:	e7d2      	b.n	8003098 <_svfiprintf_r+0x9c>
 80030f2:	9b03      	ldr	r3, [sp, #12]
 80030f4:	1d19      	adds	r1, r3, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	9103      	str	r1, [sp, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bfbb      	ittet	lt
 80030fe:	425b      	neglt	r3, r3
 8003100:	f042 0202 	orrlt.w	r2, r2, #2
 8003104:	9307      	strge	r3, [sp, #28]
 8003106:	9307      	strlt	r3, [sp, #28]
 8003108:	bfb8      	it	lt
 800310a:	9204      	strlt	r2, [sp, #16]
 800310c:	7823      	ldrb	r3, [r4, #0]
 800310e:	2b2e      	cmp	r3, #46	; 0x2e
 8003110:	d10c      	bne.n	800312c <_svfiprintf_r+0x130>
 8003112:	7863      	ldrb	r3, [r4, #1]
 8003114:	2b2a      	cmp	r3, #42	; 0x2a
 8003116:	d134      	bne.n	8003182 <_svfiprintf_r+0x186>
 8003118:	9b03      	ldr	r3, [sp, #12]
 800311a:	3402      	adds	r4, #2
 800311c:	1d1a      	adds	r2, r3, #4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	9203      	str	r2, [sp, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	bfb8      	it	lt
 8003126:	f04f 33ff 	movlt.w	r3, #4294967295
 800312a:	9305      	str	r3, [sp, #20]
 800312c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80031e8 <_svfiprintf_r+0x1ec>
 8003130:	2203      	movs	r2, #3
 8003132:	4650      	mov	r0, sl
 8003134:	7821      	ldrb	r1, [r4, #0]
 8003136:	f000 fa1d 	bl	8003574 <memchr>
 800313a:	b138      	cbz	r0, 800314c <_svfiprintf_r+0x150>
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	9b04      	ldr	r3, [sp, #16]
 8003140:	eba0 000a 	sub.w	r0, r0, sl
 8003144:	4082      	lsls	r2, r0
 8003146:	4313      	orrs	r3, r2
 8003148:	3401      	adds	r4, #1
 800314a:	9304      	str	r3, [sp, #16]
 800314c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003150:	2206      	movs	r2, #6
 8003152:	4826      	ldr	r0, [pc, #152]	; (80031ec <_svfiprintf_r+0x1f0>)
 8003154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003158:	f000 fa0c 	bl	8003574 <memchr>
 800315c:	2800      	cmp	r0, #0
 800315e:	d038      	beq.n	80031d2 <_svfiprintf_r+0x1d6>
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <_svfiprintf_r+0x1f4>)
 8003162:	bb1b      	cbnz	r3, 80031ac <_svfiprintf_r+0x1b0>
 8003164:	9b03      	ldr	r3, [sp, #12]
 8003166:	3307      	adds	r3, #7
 8003168:	f023 0307 	bic.w	r3, r3, #7
 800316c:	3308      	adds	r3, #8
 800316e:	9303      	str	r3, [sp, #12]
 8003170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003172:	4433      	add	r3, r6
 8003174:	9309      	str	r3, [sp, #36]	; 0x24
 8003176:	e768      	b.n	800304a <_svfiprintf_r+0x4e>
 8003178:	460c      	mov	r4, r1
 800317a:	2001      	movs	r0, #1
 800317c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003180:	e7a6      	b.n	80030d0 <_svfiprintf_r+0xd4>
 8003182:	2300      	movs	r3, #0
 8003184:	f04f 0c0a 	mov.w	ip, #10
 8003188:	4619      	mov	r1, r3
 800318a:	3401      	adds	r4, #1
 800318c:	9305      	str	r3, [sp, #20]
 800318e:	4620      	mov	r0, r4
 8003190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003194:	3a30      	subs	r2, #48	; 0x30
 8003196:	2a09      	cmp	r2, #9
 8003198:	d903      	bls.n	80031a2 <_svfiprintf_r+0x1a6>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0c6      	beq.n	800312c <_svfiprintf_r+0x130>
 800319e:	9105      	str	r1, [sp, #20]
 80031a0:	e7c4      	b.n	800312c <_svfiprintf_r+0x130>
 80031a2:	4604      	mov	r4, r0
 80031a4:	2301      	movs	r3, #1
 80031a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80031aa:	e7f0      	b.n	800318e <_svfiprintf_r+0x192>
 80031ac:	ab03      	add	r3, sp, #12
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	462a      	mov	r2, r5
 80031b2:	4638      	mov	r0, r7
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <_svfiprintf_r+0x1f8>)
 80031b6:	a904      	add	r1, sp, #16
 80031b8:	f3af 8000 	nop.w
 80031bc:	1c42      	adds	r2, r0, #1
 80031be:	4606      	mov	r6, r0
 80031c0:	d1d6      	bne.n	8003170 <_svfiprintf_r+0x174>
 80031c2:	89ab      	ldrh	r3, [r5, #12]
 80031c4:	065b      	lsls	r3, r3, #25
 80031c6:	f53f af2d 	bmi.w	8003024 <_svfiprintf_r+0x28>
 80031ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031cc:	b01d      	add	sp, #116	; 0x74
 80031ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d2:	ab03      	add	r3, sp, #12
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	462a      	mov	r2, r5
 80031d8:	4638      	mov	r0, r7
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <_svfiprintf_r+0x1f8>)
 80031dc:	a904      	add	r1, sp, #16
 80031de:	f000 f87d 	bl	80032dc <_printf_i>
 80031e2:	e7eb      	b.n	80031bc <_svfiprintf_r+0x1c0>
 80031e4:	080036da 	.word	0x080036da
 80031e8:	080036e0 	.word	0x080036e0
 80031ec:	080036e4 	.word	0x080036e4
 80031f0:	00000000 	.word	0x00000000
 80031f4:	08002f49 	.word	0x08002f49

080031f8 <_printf_common>:
 80031f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031fc:	4616      	mov	r6, r2
 80031fe:	4699      	mov	r9, r3
 8003200:	688a      	ldr	r2, [r1, #8]
 8003202:	690b      	ldr	r3, [r1, #16]
 8003204:	4607      	mov	r7, r0
 8003206:	4293      	cmp	r3, r2
 8003208:	bfb8      	it	lt
 800320a:	4613      	movlt	r3, r2
 800320c:	6033      	str	r3, [r6, #0]
 800320e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003212:	460c      	mov	r4, r1
 8003214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003218:	b10a      	cbz	r2, 800321e <_printf_common+0x26>
 800321a:	3301      	adds	r3, #1
 800321c:	6033      	str	r3, [r6, #0]
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	0699      	lsls	r1, r3, #26
 8003222:	bf42      	ittt	mi
 8003224:	6833      	ldrmi	r3, [r6, #0]
 8003226:	3302      	addmi	r3, #2
 8003228:	6033      	strmi	r3, [r6, #0]
 800322a:	6825      	ldr	r5, [r4, #0]
 800322c:	f015 0506 	ands.w	r5, r5, #6
 8003230:	d106      	bne.n	8003240 <_printf_common+0x48>
 8003232:	f104 0a19 	add.w	sl, r4, #25
 8003236:	68e3      	ldr	r3, [r4, #12]
 8003238:	6832      	ldr	r2, [r6, #0]
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	42ab      	cmp	r3, r5
 800323e:	dc2b      	bgt.n	8003298 <_printf_common+0xa0>
 8003240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003244:	1e13      	subs	r3, r2, #0
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	bf18      	it	ne
 800324a:	2301      	movne	r3, #1
 800324c:	0692      	lsls	r2, r2, #26
 800324e:	d430      	bmi.n	80032b2 <_printf_common+0xba>
 8003250:	4649      	mov	r1, r9
 8003252:	4638      	mov	r0, r7
 8003254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003258:	47c0      	blx	r8
 800325a:	3001      	adds	r0, #1
 800325c:	d023      	beq.n	80032a6 <_printf_common+0xae>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	6922      	ldr	r2, [r4, #16]
 8003262:	f003 0306 	and.w	r3, r3, #6
 8003266:	2b04      	cmp	r3, #4
 8003268:	bf14      	ite	ne
 800326a:	2500      	movne	r5, #0
 800326c:	6833      	ldreq	r3, [r6, #0]
 800326e:	f04f 0600 	mov.w	r6, #0
 8003272:	bf08      	it	eq
 8003274:	68e5      	ldreq	r5, [r4, #12]
 8003276:	f104 041a 	add.w	r4, r4, #26
 800327a:	bf08      	it	eq
 800327c:	1aed      	subeq	r5, r5, r3
 800327e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003282:	bf08      	it	eq
 8003284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003288:	4293      	cmp	r3, r2
 800328a:	bfc4      	itt	gt
 800328c:	1a9b      	subgt	r3, r3, r2
 800328e:	18ed      	addgt	r5, r5, r3
 8003290:	42b5      	cmp	r5, r6
 8003292:	d11a      	bne.n	80032ca <_printf_common+0xd2>
 8003294:	2000      	movs	r0, #0
 8003296:	e008      	b.n	80032aa <_printf_common+0xb2>
 8003298:	2301      	movs	r3, #1
 800329a:	4652      	mov	r2, sl
 800329c:	4649      	mov	r1, r9
 800329e:	4638      	mov	r0, r7
 80032a0:	47c0      	blx	r8
 80032a2:	3001      	adds	r0, #1
 80032a4:	d103      	bne.n	80032ae <_printf_common+0xb6>
 80032a6:	f04f 30ff 	mov.w	r0, #4294967295
 80032aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ae:	3501      	adds	r5, #1
 80032b0:	e7c1      	b.n	8003236 <_printf_common+0x3e>
 80032b2:	2030      	movs	r0, #48	; 0x30
 80032b4:	18e1      	adds	r1, r4, r3
 80032b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032c0:	4422      	add	r2, r4
 80032c2:	3302      	adds	r3, #2
 80032c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032c8:	e7c2      	b.n	8003250 <_printf_common+0x58>
 80032ca:	2301      	movs	r3, #1
 80032cc:	4622      	mov	r2, r4
 80032ce:	4649      	mov	r1, r9
 80032d0:	4638      	mov	r0, r7
 80032d2:	47c0      	blx	r8
 80032d4:	3001      	adds	r0, #1
 80032d6:	d0e6      	beq.n	80032a6 <_printf_common+0xae>
 80032d8:	3601      	adds	r6, #1
 80032da:	e7d9      	b.n	8003290 <_printf_common+0x98>

080032dc <_printf_i>:
 80032dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032e0:	7e0f      	ldrb	r7, [r1, #24]
 80032e2:	4691      	mov	r9, r2
 80032e4:	2f78      	cmp	r7, #120	; 0x78
 80032e6:	4680      	mov	r8, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	469a      	mov	sl, r3
 80032ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032f2:	d807      	bhi.n	8003304 <_printf_i+0x28>
 80032f4:	2f62      	cmp	r7, #98	; 0x62
 80032f6:	d80a      	bhi.n	800330e <_printf_i+0x32>
 80032f8:	2f00      	cmp	r7, #0
 80032fa:	f000 80d5 	beq.w	80034a8 <_printf_i+0x1cc>
 80032fe:	2f58      	cmp	r7, #88	; 0x58
 8003300:	f000 80c1 	beq.w	8003486 <_printf_i+0x1aa>
 8003304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800330c:	e03a      	b.n	8003384 <_printf_i+0xa8>
 800330e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003312:	2b15      	cmp	r3, #21
 8003314:	d8f6      	bhi.n	8003304 <_printf_i+0x28>
 8003316:	a101      	add	r1, pc, #4	; (adr r1, 800331c <_printf_i+0x40>)
 8003318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800331c:	08003375 	.word	0x08003375
 8003320:	08003389 	.word	0x08003389
 8003324:	08003305 	.word	0x08003305
 8003328:	08003305 	.word	0x08003305
 800332c:	08003305 	.word	0x08003305
 8003330:	08003305 	.word	0x08003305
 8003334:	08003389 	.word	0x08003389
 8003338:	08003305 	.word	0x08003305
 800333c:	08003305 	.word	0x08003305
 8003340:	08003305 	.word	0x08003305
 8003344:	08003305 	.word	0x08003305
 8003348:	0800348f 	.word	0x0800348f
 800334c:	080033b5 	.word	0x080033b5
 8003350:	08003449 	.word	0x08003449
 8003354:	08003305 	.word	0x08003305
 8003358:	08003305 	.word	0x08003305
 800335c:	080034b1 	.word	0x080034b1
 8003360:	08003305 	.word	0x08003305
 8003364:	080033b5 	.word	0x080033b5
 8003368:	08003305 	.word	0x08003305
 800336c:	08003305 	.word	0x08003305
 8003370:	08003451 	.word	0x08003451
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	1d1a      	adds	r2, r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	602a      	str	r2, [r5, #0]
 800337c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003384:	2301      	movs	r3, #1
 8003386:	e0a0      	b.n	80034ca <_printf_i+0x1ee>
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	682b      	ldr	r3, [r5, #0]
 800338c:	0607      	lsls	r7, r0, #24
 800338e:	f103 0104 	add.w	r1, r3, #4
 8003392:	6029      	str	r1, [r5, #0]
 8003394:	d501      	bpl.n	800339a <_printf_i+0xbe>
 8003396:	681e      	ldr	r6, [r3, #0]
 8003398:	e003      	b.n	80033a2 <_printf_i+0xc6>
 800339a:	0646      	lsls	r6, r0, #25
 800339c:	d5fb      	bpl.n	8003396 <_printf_i+0xba>
 800339e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033a2:	2e00      	cmp	r6, #0
 80033a4:	da03      	bge.n	80033ae <_printf_i+0xd2>
 80033a6:	232d      	movs	r3, #45	; 0x2d
 80033a8:	4276      	negs	r6, r6
 80033aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ae:	230a      	movs	r3, #10
 80033b0:	4859      	ldr	r0, [pc, #356]	; (8003518 <_printf_i+0x23c>)
 80033b2:	e012      	b.n	80033da <_printf_i+0xfe>
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	1d19      	adds	r1, r3, #4
 80033ba:	6029      	str	r1, [r5, #0]
 80033bc:	0605      	lsls	r5, r0, #24
 80033be:	d501      	bpl.n	80033c4 <_printf_i+0xe8>
 80033c0:	681e      	ldr	r6, [r3, #0]
 80033c2:	e002      	b.n	80033ca <_printf_i+0xee>
 80033c4:	0641      	lsls	r1, r0, #25
 80033c6:	d5fb      	bpl.n	80033c0 <_printf_i+0xe4>
 80033c8:	881e      	ldrh	r6, [r3, #0]
 80033ca:	2f6f      	cmp	r7, #111	; 0x6f
 80033cc:	bf0c      	ite	eq
 80033ce:	2308      	moveq	r3, #8
 80033d0:	230a      	movne	r3, #10
 80033d2:	4851      	ldr	r0, [pc, #324]	; (8003518 <_printf_i+0x23c>)
 80033d4:	2100      	movs	r1, #0
 80033d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033da:	6865      	ldr	r5, [r4, #4]
 80033dc:	2d00      	cmp	r5, #0
 80033de:	bfa8      	it	ge
 80033e0:	6821      	ldrge	r1, [r4, #0]
 80033e2:	60a5      	str	r5, [r4, #8]
 80033e4:	bfa4      	itt	ge
 80033e6:	f021 0104 	bicge.w	r1, r1, #4
 80033ea:	6021      	strge	r1, [r4, #0]
 80033ec:	b90e      	cbnz	r6, 80033f2 <_printf_i+0x116>
 80033ee:	2d00      	cmp	r5, #0
 80033f0:	d04b      	beq.n	800348a <_printf_i+0x1ae>
 80033f2:	4615      	mov	r5, r2
 80033f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80033f8:	fb03 6711 	mls	r7, r3, r1, r6
 80033fc:	5dc7      	ldrb	r7, [r0, r7]
 80033fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003402:	4637      	mov	r7, r6
 8003404:	42bb      	cmp	r3, r7
 8003406:	460e      	mov	r6, r1
 8003408:	d9f4      	bls.n	80033f4 <_printf_i+0x118>
 800340a:	2b08      	cmp	r3, #8
 800340c:	d10b      	bne.n	8003426 <_printf_i+0x14a>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	07de      	lsls	r6, r3, #31
 8003412:	d508      	bpl.n	8003426 <_printf_i+0x14a>
 8003414:	6923      	ldr	r3, [r4, #16]
 8003416:	6861      	ldr	r1, [r4, #4]
 8003418:	4299      	cmp	r1, r3
 800341a:	bfde      	ittt	le
 800341c:	2330      	movle	r3, #48	; 0x30
 800341e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003422:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003426:	1b52      	subs	r2, r2, r5
 8003428:	6122      	str	r2, [r4, #16]
 800342a:	464b      	mov	r3, r9
 800342c:	4621      	mov	r1, r4
 800342e:	4640      	mov	r0, r8
 8003430:	f8cd a000 	str.w	sl, [sp]
 8003434:	aa03      	add	r2, sp, #12
 8003436:	f7ff fedf 	bl	80031f8 <_printf_common>
 800343a:	3001      	adds	r0, #1
 800343c:	d14a      	bne.n	80034d4 <_printf_i+0x1f8>
 800343e:	f04f 30ff 	mov.w	r0, #4294967295
 8003442:	b004      	add	sp, #16
 8003444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	f043 0320 	orr.w	r3, r3, #32
 800344e:	6023      	str	r3, [r4, #0]
 8003450:	2778      	movs	r7, #120	; 0x78
 8003452:	4832      	ldr	r0, [pc, #200]	; (800351c <_printf_i+0x240>)
 8003454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	6829      	ldr	r1, [r5, #0]
 800345c:	061f      	lsls	r7, r3, #24
 800345e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003462:	d402      	bmi.n	800346a <_printf_i+0x18e>
 8003464:	065f      	lsls	r7, r3, #25
 8003466:	bf48      	it	mi
 8003468:	b2b6      	uxthmi	r6, r6
 800346a:	07df      	lsls	r7, r3, #31
 800346c:	bf48      	it	mi
 800346e:	f043 0320 	orrmi.w	r3, r3, #32
 8003472:	6029      	str	r1, [r5, #0]
 8003474:	bf48      	it	mi
 8003476:	6023      	strmi	r3, [r4, #0]
 8003478:	b91e      	cbnz	r6, 8003482 <_printf_i+0x1a6>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	f023 0320 	bic.w	r3, r3, #32
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	2310      	movs	r3, #16
 8003484:	e7a6      	b.n	80033d4 <_printf_i+0xf8>
 8003486:	4824      	ldr	r0, [pc, #144]	; (8003518 <_printf_i+0x23c>)
 8003488:	e7e4      	b.n	8003454 <_printf_i+0x178>
 800348a:	4615      	mov	r5, r2
 800348c:	e7bd      	b.n	800340a <_printf_i+0x12e>
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	6826      	ldr	r6, [r4, #0]
 8003492:	1d18      	adds	r0, r3, #4
 8003494:	6961      	ldr	r1, [r4, #20]
 8003496:	6028      	str	r0, [r5, #0]
 8003498:	0635      	lsls	r5, r6, #24
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	d501      	bpl.n	80034a2 <_printf_i+0x1c6>
 800349e:	6019      	str	r1, [r3, #0]
 80034a0:	e002      	b.n	80034a8 <_printf_i+0x1cc>
 80034a2:	0670      	lsls	r0, r6, #25
 80034a4:	d5fb      	bpl.n	800349e <_printf_i+0x1c2>
 80034a6:	8019      	strh	r1, [r3, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	4615      	mov	r5, r2
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	e7bc      	b.n	800342a <_printf_i+0x14e>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	602a      	str	r2, [r5, #0]
 80034b8:	681d      	ldr	r5, [r3, #0]
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 f859 	bl	8003574 <memchr>
 80034c2:	b108      	cbz	r0, 80034c8 <_printf_i+0x1ec>
 80034c4:	1b40      	subs	r0, r0, r5
 80034c6:	6060      	str	r0, [r4, #4]
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	2300      	movs	r3, #0
 80034ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d2:	e7aa      	b.n	800342a <_printf_i+0x14e>
 80034d4:	462a      	mov	r2, r5
 80034d6:	4649      	mov	r1, r9
 80034d8:	4640      	mov	r0, r8
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	47d0      	blx	sl
 80034de:	3001      	adds	r0, #1
 80034e0:	d0ad      	beq.n	800343e <_printf_i+0x162>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	079b      	lsls	r3, r3, #30
 80034e6:	d413      	bmi.n	8003510 <_printf_i+0x234>
 80034e8:	68e0      	ldr	r0, [r4, #12]
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	4298      	cmp	r0, r3
 80034ee:	bfb8      	it	lt
 80034f0:	4618      	movlt	r0, r3
 80034f2:	e7a6      	b.n	8003442 <_printf_i+0x166>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4632      	mov	r2, r6
 80034f8:	4649      	mov	r1, r9
 80034fa:	4640      	mov	r0, r8
 80034fc:	47d0      	blx	sl
 80034fe:	3001      	adds	r0, #1
 8003500:	d09d      	beq.n	800343e <_printf_i+0x162>
 8003502:	3501      	adds	r5, #1
 8003504:	68e3      	ldr	r3, [r4, #12]
 8003506:	9903      	ldr	r1, [sp, #12]
 8003508:	1a5b      	subs	r3, r3, r1
 800350a:	42ab      	cmp	r3, r5
 800350c:	dcf2      	bgt.n	80034f4 <_printf_i+0x218>
 800350e:	e7eb      	b.n	80034e8 <_printf_i+0x20c>
 8003510:	2500      	movs	r5, #0
 8003512:	f104 0619 	add.w	r6, r4, #25
 8003516:	e7f5      	b.n	8003504 <_printf_i+0x228>
 8003518:	080036eb 	.word	0x080036eb
 800351c:	080036fc 	.word	0x080036fc

08003520 <memmove>:
 8003520:	4288      	cmp	r0, r1
 8003522:	b510      	push	{r4, lr}
 8003524:	eb01 0402 	add.w	r4, r1, r2
 8003528:	d902      	bls.n	8003530 <memmove+0x10>
 800352a:	4284      	cmp	r4, r0
 800352c:	4623      	mov	r3, r4
 800352e:	d807      	bhi.n	8003540 <memmove+0x20>
 8003530:	1e43      	subs	r3, r0, #1
 8003532:	42a1      	cmp	r1, r4
 8003534:	d008      	beq.n	8003548 <memmove+0x28>
 8003536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800353a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800353e:	e7f8      	b.n	8003532 <memmove+0x12>
 8003540:	4601      	mov	r1, r0
 8003542:	4402      	add	r2, r0
 8003544:	428a      	cmp	r2, r1
 8003546:	d100      	bne.n	800354a <memmove+0x2a>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800354e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003552:	e7f7      	b.n	8003544 <memmove+0x24>

08003554 <_sbrk_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	2300      	movs	r3, #0
 8003558:	4d05      	ldr	r5, [pc, #20]	; (8003570 <_sbrk_r+0x1c>)
 800355a:	4604      	mov	r4, r0
 800355c:	4608      	mov	r0, r1
 800355e:	602b      	str	r3, [r5, #0]
 8003560:	f7fd f852 	bl	8000608 <_sbrk>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d102      	bne.n	800356e <_sbrk_r+0x1a>
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	b103      	cbz	r3, 800356e <_sbrk_r+0x1a>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	bd38      	pop	{r3, r4, r5, pc}
 8003570:	200002a0 	.word	0x200002a0

08003574 <memchr>:
 8003574:	4603      	mov	r3, r0
 8003576:	b510      	push	{r4, lr}
 8003578:	b2c9      	uxtb	r1, r1
 800357a:	4402      	add	r2, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	4618      	mov	r0, r3
 8003580:	d101      	bne.n	8003586 <memchr+0x12>
 8003582:	2000      	movs	r0, #0
 8003584:	e003      	b.n	800358e <memchr+0x1a>
 8003586:	7804      	ldrb	r4, [r0, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	428c      	cmp	r4, r1
 800358c:	d1f6      	bne.n	800357c <memchr+0x8>
 800358e:	bd10      	pop	{r4, pc}

08003590 <memcpy>:
 8003590:	440a      	add	r2, r1
 8003592:	4291      	cmp	r1, r2
 8003594:	f100 33ff 	add.w	r3, r0, #4294967295
 8003598:	d100      	bne.n	800359c <memcpy+0xc>
 800359a:	4770      	bx	lr
 800359c:	b510      	push	{r4, lr}
 800359e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035a2:	4291      	cmp	r1, r2
 80035a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035a8:	d1f9      	bne.n	800359e <memcpy+0xe>
 80035aa:	bd10      	pop	{r4, pc}

080035ac <_realloc_r>:
 80035ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b0:	4680      	mov	r8, r0
 80035b2:	4614      	mov	r4, r2
 80035b4:	460e      	mov	r6, r1
 80035b6:	b921      	cbnz	r1, 80035c2 <_realloc_r+0x16>
 80035b8:	4611      	mov	r1, r2
 80035ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035be:	f7ff bc37 	b.w	8002e30 <_malloc_r>
 80035c2:	b92a      	cbnz	r2, 80035d0 <_realloc_r+0x24>
 80035c4:	f7ff fbcc 	bl	8002d60 <_free_r>
 80035c8:	4625      	mov	r5, r4
 80035ca:	4628      	mov	r0, r5
 80035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d0:	f000 f81b 	bl	800360a <_malloc_usable_size_r>
 80035d4:	4284      	cmp	r4, r0
 80035d6:	4607      	mov	r7, r0
 80035d8:	d802      	bhi.n	80035e0 <_realloc_r+0x34>
 80035da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035de:	d812      	bhi.n	8003606 <_realloc_r+0x5a>
 80035e0:	4621      	mov	r1, r4
 80035e2:	4640      	mov	r0, r8
 80035e4:	f7ff fc24 	bl	8002e30 <_malloc_r>
 80035e8:	4605      	mov	r5, r0
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d0ed      	beq.n	80035ca <_realloc_r+0x1e>
 80035ee:	42bc      	cmp	r4, r7
 80035f0:	4622      	mov	r2, r4
 80035f2:	4631      	mov	r1, r6
 80035f4:	bf28      	it	cs
 80035f6:	463a      	movcs	r2, r7
 80035f8:	f7ff ffca 	bl	8003590 <memcpy>
 80035fc:	4631      	mov	r1, r6
 80035fe:	4640      	mov	r0, r8
 8003600:	f7ff fbae 	bl	8002d60 <_free_r>
 8003604:	e7e1      	b.n	80035ca <_realloc_r+0x1e>
 8003606:	4635      	mov	r5, r6
 8003608:	e7df      	b.n	80035ca <_realloc_r+0x1e>

0800360a <_malloc_usable_size_r>:
 800360a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800360e:	1f18      	subs	r0, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	bfbc      	itt	lt
 8003614:	580b      	ldrlt	r3, [r1, r0]
 8003616:	18c0      	addlt	r0, r0, r3
 8003618:	4770      	bx	lr
	...

0800361c <_init>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	bf00      	nop
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr

08003628 <_fini>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr
